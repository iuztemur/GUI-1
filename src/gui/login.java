/*
Wellesley Arreza
wra216
CSE 241 Project
 */
package gui;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Wellesley
 */
public class login extends javax.swing.JFrame {

    private Connection con = null;

    /**
     * Creates new form login
     */
    public login() {

        initComponents();

        main.setVisible(false);
        results.setVisible(false);
        
        Component frame = null;
        JOptionPane.showMessageDialog(frame,
                "Welcome to the Merry Lunch Online Trading Platform.\n"
                + "Log in with your customer id",
                "", JOptionPane.PLAIN_MESSAGE
        );
        
       

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.s
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jDialog1 = new javax.swing.JDialog();
        login = new javax.swing.JPanel();
        submit = new javax.swing.JButton();
        account_field = new javax.swing.JTextField();
        login_exit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        main = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        query_logout = new javax.swing.JButton();
        query_submit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        query_type = new javax.swing.JComboBox();
        query_ticker = new javax.swing.JTextField();
        query_view_all = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cash_to_account = new javax.swing.JComboBox();
        cash_action = new javax.swing.JComboBox();
        cash_amount = new javax.swing.JTextField();
        cash_submit = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cash_account = new javax.swing.JComboBox();
        cash_logout = new javax.swing.JButton();
        loan_panel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        loan_amount = new javax.swing.JTextField();
        loan_borrow = new javax.swing.JButton();
        loan_pay = new javax.swing.JButton();
        loan_account = new javax.swing.JComboBox();
        loan_interest = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        loan_cash = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        loan_cash_type = new javax.swing.JComboBox();
        pay_interest = new javax.swing.JButton();
        loan_logout = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        retirement_submit = new javax.swing.JButton();
        retirement_logout = new javax.swing.JButton();
        retirement_deposit = new javax.swing.JTextField();
        retirement_list = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        retirement_cash = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        retirement_cash_type = new javax.swing.JComboBox();
        retirement_action = new javax.swing.JComboBox();
        jLabel46 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        close_acc_list = new javax.swing.JComboBox();
        close_acc_submit = new javax.swing.JButton();
        account_open = new javax.swing.JButton();
        account_type = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        management_logout = new javax.swing.JButton();
        account_plan = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        trade_security = new javax.swing.JComboBox();
        trade_action = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        trade_type = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        trade_submit = new javax.swing.JButton();
        trade_logout = new javax.swing.JButton();
        trade_ticker = new javax.swing.JTextField();
        trade_quantity = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        trade_cash_account = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        trade_cash = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        invest_acc = new javax.swing.JComboBox();
        investment_purchases = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        my_quantity = new javax.swing.JTextField();
        my_price = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        trade_display = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        change_transaction_list = new javax.swing.JButton();
        trade_account_type = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        change_account_list = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        my_date = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        transfer_submit = new javax.swing.JButton();
        transfer_logout = new javax.swing.JButton();
        cash_transfer_from_id_list = new javax.swing.JComboBox();
        cash_transfer_to_id_list = new javax.swing.JComboBox();
        transfer_cash = new javax.swing.JTextField();
        cash_transfer_to_type = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cash_transfer_from_type = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        cash_transfer_acc1 = new javax.swing.JComboBox();
        cash_transfer_change_from = new javax.swing.JButton();
        cash_transfer_change_to = new javax.swing.JButton();
        transfer_investments = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        investment_transfer_acc_list = new javax.swing.JComboBox();
        investment_transfer_from_id_list = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        cash_transfer_acc2 = new javax.swing.JComboBox();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        investment_transfer_change_from = new javax.swing.JButton();
        transfer_shares = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        investment_transfer_acc_list2 = new javax.swing.JComboBox();
        jLabel48 = new javax.swing.JLabel();
        investment_transfer_to_id_list = new javax.swing.JComboBox();
        investment_transfer_change_to = new javax.swing.JButton();
        investment_transfer_change_id = new javax.swing.JButton();
        transfer_investment_trade_id = new javax.swing.JComboBox();
        jLabel57 = new javax.swing.JLabel();
        results = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        result_text = new javax.swing.JTextArea();
        result_return = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        submit.setText("submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        login_exit.setText("exit");
        login_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login_exitActionPerformed(evt);
            }
        });

        jLabel2.setText("Login :");

        javax.swing.GroupLayout loginLayout = new javax.swing.GroupLayout(login);
        login.setLayout(loginLayout);
        loginLayout.setHorizontalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(submit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(account_field)
                    .addComponent(login_exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        loginLayout.setVerticalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(account_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(35, 35, 35)
                .addComponent(submit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(login_exit)
                .addContainerGap())
        );

        query_logout.setText("logout");
        query_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                query_logoutActionPerformed(evt);
            }
        });

        query_submit.setText("submit");
        query_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                query_submitActionPerformed(evt);
            }
        });

        jLabel1.setText("Ticker :");

        jLabel3.setText("Security :");

        query_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stock", "Mutual Fund" }));

        query_view_all.setText("view all");
        query_view_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                query_view_allActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(query_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(query_ticker))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 709, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query_submit)
                    .addComponent(query_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(query_view_all))
                .addGap(26, 26, 26))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(query_ticker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(query_submit))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(query_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(query_view_all))
                .addGap(18, 18, 18)
                .addComponent(query_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(544, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("query", jPanel2);

        jLabel7.setText("from/to:");

        jLabel9.setText("action :");

        jLabel10.setText("amount :");

        cash_to_account.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "checking_balance", "savings_balance" }));

        cash_action.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "deposit", "withdraw", "view" }));
        cash_action.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_actionActionPerformed(evt);
            }
        });

        cash_amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_amountActionPerformed(evt);
            }
        });

        cash_submit.setText("submit");
        cash_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_submitActionPerformed(evt);
            }
        });

        jLabel11.setText("account :");

        cash_account.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cash_account.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_accountActionPerformed(evt);
            }
        });

        cash_logout.setText("logout");
        cash_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cash_submit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cash_logout))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(cash_amount))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cash_to_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cash_action, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(cash_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 784, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cash_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cash_action, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cash_to_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cash_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cash_submit)
                    .addComponent(cash_logout))
                .addContainerGap(415, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("cash management", jPanel1);

        jLabel16.setText("loan acct");

        jLabel17.setText("Amount");

        jLabel18.setText("Interest Rate");

        loan_amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loan_amountActionPerformed(evt);
            }
        });

        loan_borrow.setText("Borrow");
        loan_borrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loan_borrowActionPerformed(evt);
            }
        });

        loan_pay.setText("Pay Loan");
        loan_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loan_payActionPerformed(evt);
            }
        });

        loan_account.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        loan_interest.setEditable(false);
        loan_interest.setText(".07");

        jLabel27.setText("cash acct");

        loan_cash.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel31.setText("cash type");

        loan_cash_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "checking_balance", "savings_balance" }));

        pay_interest.setText("Pay Interest");
        pay_interest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pay_interestActionPerformed(evt);
            }
        });

        loan_logout.setText("logout");
        loan_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loan_logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loan_panelLayout = new javax.swing.GroupLayout(loan_panel);
        loan_panel.setLayout(loan_panelLayout);
        loan_panelLayout.setHorizontalGroup(
            loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loan_panelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loan_logout)
                    .addGroup(loan_panelLayout.createSequentialGroup()
                        .addComponent(loan_borrow)
                        .addGap(29, 29, 29)
                        .addComponent(loan_pay)
                        .addGap(37, 37, 37)
                        .addComponent(pay_interest))
                    .addGroup(loan_panelLayout.createSequentialGroup()
                        .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))
                        .addGap(22, 22, 22)
                        .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loan_cash_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loan_cash, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(loan_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(loan_amount)
                                .addComponent(loan_interest)))))
                .addContainerGap(652, Short.MAX_VALUE))
        );
        loan_panelLayout.setVerticalGroup(
            loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loan_panelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(loan_cash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(loan_cash_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(loan_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(loan_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(loan_interest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(loan_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loan_borrow)
                    .addComponent(loan_pay)
                    .addComponent(pay_interest))
                .addGap(18, 18, 18)
                .addComponent(loan_logout)
                .addContainerGap(332, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("loan management", loan_panel);

        jLabel34.setText("Account");

        jLabel35.setText("Amount:");

        retirement_submit.setText("submit");
        retirement_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirement_submitActionPerformed(evt);
            }
        });

        retirement_logout.setText("logout");
        retirement_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirement_logoutActionPerformed(evt);
            }
        });

        retirement_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel42.setText("Deposit/Withdraw Cash");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("In this tab, you can only\nwithdraw or deposit cash\ninto your retirement accounts.\nTo buy investments,\ngo to the trade tab\nand select your retirement\naccount before submitting\na purchase.\nand purchase");
        jScrollPane2.setViewportView(jTextArea1);

        retirement_cash.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel44.setText("cash account:");

        jLabel45.setText("type :");

        retirement_cash_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "checking_balance", "savings_balance" }));

        retirement_action.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "deposit", "withdraw" }));

        jLabel46.setText("action :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 403, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(jLabel34)
                            .addComponent(jLabel44)
                            .addComponent(jLabel45)
                            .addComponent(jLabel46))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(retirement_cash_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(retirement_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(retirement_cash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(retirement_deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(retirement_action, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(retirement_submit)
                        .addGap(87, 87, 87)
                        .addComponent(retirement_logout)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel42)
                        .addGap(52, 52, 52)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(retirement_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(retirement_deposit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retirement_cash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44))
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(retirement_cash_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retirement_action, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retirement_submit)
                    .addComponent(retirement_logout))
                .addContainerGap(288, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("retirement management", jPanel5);

        close_acc_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        close_acc_submit.setText("Close Account");
        close_acc_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_acc_submitActionPerformed(evt);
            }
        });

        account_open.setText("Open Account");
        account_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_openActionPerformed(evt);
            }
        });

        account_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cash_mgm_acc", "investment_acc", "retirement_acc" }));

        jLabel36.setText("Close Accounts");

        jLabel37.setText("Open Accounts");

        jLabel38.setText("For Retirement Accounts Only :");

        jLabel39.setText("Plan :");

        jLabel40.setText("Type :");

        management_logout.setText("logout");
        management_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                management_logoutActionPerformed(evt);
            }
        });

        account_plan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IRA", "SEP", "ROTH-IRA", "401(K)", "403(B)" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel37))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(account_open)
                                .addComponent(jLabel38))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel39)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(account_plan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel40)
                            .addGap(18, 18, 18)
                            .addComponent(account_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(176, 176, 176)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(close_acc_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(close_acc_submit)
                            .addComponent(management_logout))
                        .addGap(0, 528, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jLabel36))
                .addGap(44, 44, 44)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(account_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(close_acc_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(close_acc_submit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(account_plan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(management_logout)
                    .addComponent(account_open))
                .addContainerGap(384, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("account management", jPanel6);

        trade_security.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "stock", "mutual_funds" }));
        trade_security.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_securityActionPerformed(evt);
            }
        });

        trade_action.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Buy", "Sell" }));

        jLabel5.setText("Ticker :");

        jLabel6.setText("Quantity :");

        trade_type.setText("Security :");

        jLabel8.setText("Action :");

        trade_submit.setText("submit");
        trade_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_submitActionPerformed(evt);
            }
        });

        trade_logout.setText("logout");
        trade_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_logoutActionPerformed(evt);
            }
        });

        trade_ticker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_tickerActionPerformed(evt);
            }
        });

        trade_quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_quantityActionPerformed(evt);
            }
        });

        jLabel20.setText("Cash Account:");

        trade_cash_account.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel21.setText("Checkings or Savings:");

        trade_cash.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "checking_balance", "savings_balance" }));
        trade_cash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_cashActionPerformed(evt);
            }
        });

        jLabel22.setText("Account ID :");

        invest_acc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        investment_purchases.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        investment_purchases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                investment_purchasesActionPerformed(evt);
            }
        });

        jLabel24.setText("Select Trades to Sell");

        my_quantity.setEditable(false);

        my_price.setEditable(false);

        jLabel25.setText("Quantity Purchased");

        jLabel26.setText("Price Purchased");

        trade_display.setText("Display");
        trade_display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_displayActionPerformed(evt);
            }
        });

        jLabel41.setText("Trade ID:");

        change_transaction_list.setText("Change Account");
        change_transaction_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change_transaction_listActionPerformed(evt);
            }
        });

        trade_account_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "investment_acc", "retirement_acc" }));

        jLabel43.setText("Account Type");

        change_account_list.setText("Change Type");
        change_account_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change_account_listActionPerformed(evt);
            }
        });

        jLabel50.setText("Date Purchased");

        my_date.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(836, Short.MAX_VALUE)
                .addComponent(investment_purchases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(trade_logout)
                        .addGap(71, 71, 71)
                        .addComponent(trade_submit)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trade_cash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(change_transaction_list, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(change_account_list, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel8)
                    .addComponent(jLabel22)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(trade_type)
                    .addComponent(jLabel43))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(trade_account_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel41)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel50))
                                .addGap(53, 53, 53)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(trade_display)
                                    .addComponent(my_price, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(my_date, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(my_quantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))))
                        .addGap(62, 62, 62))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trade_cash_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trade_action, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trade_ticker, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invest_acc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trade_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trade_security, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 619, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(trade_account_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43)
                    .addComponent(change_account_list))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(investment_purchases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(invest_acc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(change_transaction_list, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel50)
                            .addComponent(my_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(my_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(trade_ticker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel26)
                        .addComponent(my_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trade_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trade_security, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trade_type))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(trade_cash_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(trade_display))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(trade_action, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trade_cash, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trade_submit)
                            .addComponent(trade_logout))
                        .addGap(79, 79, 79))))
        );

        jTabbedPane1.addTab("trade", jPanel3);

        jLabel12.setText("From :");

        jLabel13.setText("to :");

        jLabel14.setText("amount :");

        transfer_submit.setText("Transfer Cash");
        transfer_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfer_submitActionPerformed(evt);
            }
        });

        transfer_logout.setText("logout");
        transfer_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfer_logoutActionPerformed(evt);
            }
        });

        cash_transfer_from_id_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cash_transfer_to_id_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        transfer_cash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfer_cashActionPerformed(evt);
            }
        });

        cash_transfer_to_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "checking_balance", "savings_balance" }));

        jLabel15.setText("type:");

        jLabel19.setText("Type");

        cash_transfer_from_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "checking_balance", "savings_balance" }));

        jLabel32.setText("Account:");

        cash_transfer_acc1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cash_mgm_acc", "retirement_acc" }));

        cash_transfer_change_from.setText("Change");
        cash_transfer_change_from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_transfer_change_fromActionPerformed(evt);
            }
        });

        cash_transfer_change_to.setText("Change");
        cash_transfer_change_to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_transfer_change_toActionPerformed(evt);
            }
        });

        transfer_investments.setText("Transfer Investments");
        transfer_investments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfer_investmentsActionPerformed(evt);
            }
        });

        jLabel47.setText("Investment Transfers");

        investment_transfer_acc_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "investment_acc", "retirement_acc" }));

        investment_transfer_from_id_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel49.setText("Account:");

        jLabel51.setText("Account:");

        jLabel52.setText("From:");

        cash_transfer_acc2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cash_mgm_acc", "retirement_acc" }));

        jLabel53.setText("Account:");

        jLabel54.setText("Cash Transfers");

        investment_transfer_change_from.setText("Change");
        investment_transfer_change_from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                investment_transfer_change_fromActionPerformed(evt);
            }
        });

        jLabel56.setText("Shares :");

        investment_transfer_acc_list2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "investment_acc", "retirement_acc" }));

        jLabel48.setText("to :");

        investment_transfer_to_id_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1" }));

        investment_transfer_change_to.setText("Change");
        investment_transfer_change_to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                investment_transfer_change_toActionPerformed(evt);
            }
        });

        investment_transfer_change_id.setText("Change");
        investment_transfer_change_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                investment_transfer_change_idActionPerformed(evt);
            }
        });

        transfer_investment_trade_id.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel57.setText("Trade ID:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addComponent(jLabel12)
                            .addComponent(jLabel19)
                            .addComponent(jLabel32)
                            .addComponent(jLabel53))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cash_transfer_to_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transfer_cash, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_transfer_to_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_transfer_from_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_transfer_from_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_transfer_acc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_transfer_acc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel54)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cash_transfer_change_from)
                                    .addComponent(cash_transfer_change_to))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel52)
                                            .addComponent(jLabel51)))
                                    .addComponent(jLabel48)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel49)
                                        .addComponent(jLabel57)
                                        .addComponent(jLabel56, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(investment_transfer_acc_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(investment_transfer_change_from))
                                    .addComponent(investment_transfer_to_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(transfer_shares, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(investment_transfer_from_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(investment_transfer_acc_list2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(transfer_investment_trade_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(42, 42, 42)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(investment_transfer_change_to)
                                            .addComponent(investment_transfer_change_id)))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(transfer_investments)
                                .addGap(155, 155, 155)))
                        .addGap(212, 212, 212))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel47)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transfer_logout)
                    .addComponent(transfer_submit))
                .addContainerGap(780, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel54))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(cash_transfer_acc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_transfer_change_from))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(cash_transfer_from_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(investment_transfer_from_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel52))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(cash_transfer_from_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transfer_investment_trade_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel57)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(investment_transfer_acc_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel51)
                            .addComponent(investment_transfer_change_from))
                        .addGap(18, 18, 18)
                        .addComponent(investment_transfer_change_id)))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(transfer_shares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cash_transfer_change_to)
                    .addComponent(cash_transfer_acc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53)
                    .addComponent(jLabel49)
                    .addComponent(investment_transfer_acc_list2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(investment_transfer_change_to))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cash_transfer_to_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel48)
                        .addComponent(investment_transfer_to_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cash_transfer_to_id_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(transfer_investments)
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(transfer_cash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(transfer_submit)
                .addGap(30, 30, 30)
                .addComponent(transfer_logout)
                .addContainerGap(174, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("transfers", jPanel4);

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        result_text.setEditable(false);
        result_text.setColumns(20);
        result_text.setRows(5);
        jScrollPane1.setViewportView(result_text);

        result_return.setText("return");
        result_return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                result_returnActionPerformed(evt);
            }
        });

        jLabel4.setText("Results :");

        javax.swing.GroupLayout resultsLayout = new javax.swing.GroupLayout(results);
        results.setLayout(resultsLayout);
        resultsLayout.setHorizontalGroup(
            resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(result_return)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        resultsLayout.setVerticalGroup(
            resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(result_return)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(results, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(main, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(253, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(main, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(results, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean pcheck(String p) {
        boolean flag = true;
        char c = '.';
        Scanner s = new Scanner(p.replaceAll(" ",""));
        if (s.hasNextDouble()) {
            double d = s.nextDouble();
            String price = Double.toString(d);
            String[] split = price.split("\\.");
            int length = split[1].length();

            if (length <= 2) {
                System.out.println("Price is valid");
                flag = true;
            } else {
                System.out.println("Price is invalid. More than two decimal places :  " + p);
                flag = false;
            }

        } else {
            System.out.println("Price is invalid :  " + p);
            flag = false;
        }
        s.close();
        return flag;
    }

    public boolean checkid(String s) {
        boolean flag = true;

        char[] ch = s.toCharArray(); // check if user input is actually a number
        for (int i = 0; i < s.length(); i++) {
            if (!Character.isDigit(ch[i])) {
                flag = false;
            }

        }

        return flag;
    }


    public void messageUser(String q){
        Component frame = null;
        JOptionPane.showMessageDialog(frame,
                q,
                "", JOptionPane.PLAIN_MESSAGE
        );
    }
    
    
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        String text = account_field.getText().toString();
        //if the input is not a number then dont execute this.
        try {
            if (checkid(text)) {
                int id = Integer.parseInt(account_field.getText().toString());
                System.out.println(id);
                Class.forName("oracle.jdbc.driver.OracleDriver");
                con = DriverManager.getConnection(
                        "jdbc:oracle:thin:@edgar1.cse.lehigh.edu:1521:cse241", "wra216",
                        "P810339776");
                System.out.println("connection successfully made.");
                Statement s = con.createStatement();
                String q;
                ResultSet result;
                q = "select customer_id from customer where customer_id=" + id;
                result = s.executeQuery(q);

                if (!result.next()) {
                    System.out.println("Cannot find customer account");
                    Component frame = null;

                    JOptionPane.showMessageDialog(frame,
                            "Invalid ID\n"
                            + "Please enter a valid ID.",
                            "", JOptionPane.PLAIN_MESSAGE
                    );

                } else {
                    do {
                        //System.out.println(result.getString("customer_id"));

                    } while (result.next());

                    //hide the frame and set frame2 to be visible.
                    login.setVisible(false);
                    main.setVisible(true);

          // Display Accounts for Cash management
                }

                s.close();
                findAccount();
                getInvestAcc();
                getMyTrades(invest_acc.getSelectedItem().toString());
                findloan();
                findRetirement();
                findAllAccounts();
                result_text.setText("");

            } 
            else {
                Component frame = null;

                JOptionPane.showMessageDialog(frame,
                        "Invalid Customer ID\n"
                        + "Please Enter a Valid ID",
                        "", JOptionPane.PLAIN_MESSAGE);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_submitActionPerformed

    public void findRetirement(){
        int id = Integer.parseInt(account_field.getText().toString());
        String q = "select acc_number from owns natural join account where acc_type='retirement' AND customer_id=" + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Retirement Accounts");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                    
                    flag = true;
                } while (result.next());

               
            }
            
             String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                retirement_list.setModel(model);

           
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void login_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login_exitActionPerformed
        System.out.println("Program exit");
        System.exit(1);
    }//GEN-LAST:event_login_exitActionPerformed

    private void result_returnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_result_returnActionPerformed
        result_text.setText("");
        results.setVisible(false);
        main.setVisible(true);
    }//GEN-LAST:event_result_returnActionPerformed

    private void trade_quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trade_quantityActionPerformed

    private void trade_tickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_tickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trade_tickerActionPerformed

    private void trade_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_logoutActionPerformed
        try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);
    }//GEN-LAST:event_trade_logoutActionPerformed

//    public boolean checkDouble(String str) {
//        boolean isnum = false;
//        char[] ch = str.toCharArray(); // check if user input is actually a number
//        for (int i = 0; i < str.length(); i++) {
//            if (Character.isDigit(ch[i]) || ch[i] == '.') {
//                isnum = true;
//            }
//
//        }
//
//        return isnum;
//    }

    public boolean findinvestment(String str, String type) {
        boolean found = true;
        try {
            Statement s = con.createStatement();
            String q = "select ticker from " + type + " where ticker = '" + str + "'";
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Cannot find investment");
                found = false;
                s.close();
            } else {

                do {
                    found = true;
                } while (result.next());
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Find Investment.");
        }

        return found;
    }

    public int findShares(String str, String type, String acc_number) {
        int amount = 0;
        try {
            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
            String q = "select shares from investment_acc where ticker = '" + str + "' AND acc_number = " + acc_number;
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("No shares were found.");
                amount = 0;
                s.close();
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        amount = Integer.parseInt(result.getString(i));

                    }

                } while (result.next());
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error. Cannot find Invesment Account");
        }

        return amount;
    }

    public String getBalance(String table, String ticker, String id) {
        String str = "0";
        try {
            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
            String q = "select amount from " + table + " where ticker = '" + ticker + "' AND acc_number = " + id;
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Cannot find balance in "+ table);
                str = "0";
                s.close();
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        str = result.getString(i);

                    }

                } while (result.next());
            }

            result.close();
            s.close();

        } catch (SQLException ex) {
            System.out.println("Error. Cannot find Invesment Account");
        }

        return str;

    }

    public double findMFPrice(String ticker){
        // query the mutual fund in the portfolio table
        // 
        String q="select price, quantity from portfolio, stock "
                + "where mutual_fund_ticker='GLDIX' "
                + "AND portfolio.stock_ticker=stock.ticker;";
        double price=0;
        int quantity=0;
        double revenue=0;
          try {
            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
           
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Cannot find acc_number in investment_acc");
             
                s.close();
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    
                       
                        price=Double.parseDouble(result.getString(1));
                        quantity=Integer.parseInt(result.getString(2));
                        revenue+=(price*quantity);
                    

                } while (result.next());

            }

            result.close();
            s.close();

        } catch (SQLException ex) {
            System.out.println("Error. Cannot find Invesment Account"+ex.toString());          
        }

        // execute query
        return revenue;
    }
    public boolean search_invest_act(String ticker, String acc_number) {
        boolean found = false;
        try {
            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
            String q = "select acc_number from investment_acc where ticker = '" + ticker + "' AND acc_number = " + acc_number;
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Cannot find acc_number in investment_acc");
                found=false;
                s.close();
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        found = true;

                    }

                } while (result.next());

            }

            result.close();
            s.close();

        } catch (SQLException ex) {
            System.out.println("Error. Cannot find Invesment Account");
        }

        return found;
    }

    public void buySecurity(String id, String cashid, String ticker, String security,
            int quantity, double price, double funds, String cashtype) {
        
       
        // search for how much shares do you own
        int amount = findShares(ticker, security, id);
        // calculate expense
        double expense = quantity * price;
        // retrieve current balance of account
        double balance = Double.parseDouble(getBalance("investment_acc", ticker, id));
        balance += expense;
        System.out.println("new Balance : " + balance);
        amount += quantity;
        //update investments
        updateInvestments(amount, ticker, id, "" + balance);

        //update transactions
        String tid = "" + updateTrans(expense, security);
        //update trades
        insertTrades(id, ticker, tid, security, "buy", price, quantity,quantity,"current_timestamp");

        double bal = funds - expense;

        //update cash mgm account
        updateCashAcc(cashid, bal, cashtype, "" + expense);
        
        getMyTrades(invest_acc.getSelectedItem().toString());

    }

    public double findfunds(String id, String type) {
        double amount = 0;
        try {

            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
            String q = "select " + type + " from cash_mgm_acc where acc_number = " + id;
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Could not find funds in cash mgm account.");
                s.close();
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        amount = Double.parseDouble(result.getString(i));

                    }

                } while (result.next());
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Find Balance.");
        }
        return amount;
    }
    
    
    public void updateTrades(String id, int quantity_left){
        try {
            Statement s = con.createStatement();
          
            String q = "update trade set quantity_left= " +quantity_left+" where transaction_id="+id;
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Trades Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Successful update of Trades");
            }
            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Trades " + ex.toString());
        }
    }
    
    

    public void sellSecurity(String id, String cashid, String ticker,
            String type, int quantity, double price, double funds, String cashtype) {
        String main_acc = account_field.getText().toString().trim();
         int shares = findShares(ticker, type, id);
        if(my_quantity.equals("0")){
            System.out.println(" No more shares");
        }
        else{
            
        }
       
        int quantity_left= Integer.parseInt(my_quantity.getText()) - quantity;
        if(quantity_left <0){
            System.out.println("You are selling too many shares");
        }
        else{
         String oldbalance=getInvestValue(id, ticker);
        double calculation=Double.parseDouble(my_price.getText()) * (quantity);
        double newbalance=Double.parseDouble(oldbalance) - calculation;
        
        updateTrades(investment_purchases.getSelectedItem().toString(),quantity_left);
        double revenue=quantity*price;
        //update transactions
        String tID=updateTrans(revenue,type);
        shares=shares-quantity;
        updateInvestments(shares, ticker, id,""+newbalance);
        System.out.println("Revenue : "+revenue);
        funds=funds+revenue;
        updateCashAcc(cashid, funds, cashtype, ""+funds);
        insertTrades(id, ticker, tID, type, "sell", Integer.parseInt(my_price.getText()),quantity,quantity_left,my_date.getText());
        getMyTrades(invest_acc.getSelectedItem().toString());
        /*
        Update trades table for new quantity amount= my_quantity - quantity
        insert into transaction amount=price*quantity
        update investment acc with decreased shares
        update cash mgm account
        
        
        
        
        */
        
        
//         search for how much shares do you own
//        int amount = findShares(ticker, type, id);
//
//        if (amount == 0) {
//            delete investment tuple if you dont own any shares.
//            updateInvestments(amount, "0", ticker, id);
//        } else if (quantity > amount) {
//            System.out.println("Error. You don't have enough shares.");
//        } else {
//
//             retrieve current balance of account
//            double balance = Double.parseDouble(getBalance("investment_acc", ticker, id));
//
//            calculate revenue
//          
//        update investments
//
//            updateInvestments(amount, "" + revenue, ticker, id);
//            System.out.println("Revenue earned :" + revenue);
//            update transactions
//            String act_id = "" + updateTrans(revenue, type);
//            update trades
//            insertTrades(main_acc, ticker, act_id, type, "sell", price, quantity, quantity);
//
//            double bal = funds + revenue;
//            update cash mgm account
//            updateCashAcc(cashid, bal, cashtype, "" + revenue);
//        }
        }
    }

    public String getMaxID(String table, String column) {

        String id = "0";
        try {
            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
            //SELECT COALESCE(max(loan_id), 0) from loans
            String q = "select coalesce(max(" + column + "),0) from " + table;
            //select max(transaction_id) from transaction
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Could not find maximum id.");
                s.close();
                return "0";
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        id = result.getString(i);

                    }

                } while (result.next());
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Find Max ID");
        } catch (NullPointerException ex) {
            id = "0";
            return id;
        }

        return id;

    }

    public void updateCashAcc(String id, double balance, String cashtype, String expense) {

        try {
            Statement s = con.createStatement();
            String q = "update cash_mgm_acc set " + cashtype + "=" + balance + ", date_last_accessed ="
                    + " current_timestamp where acc_number = " + id;
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Cash MGM account Failed: Possible incorrect  id");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to update cash acct :" + ex.toString());
        }

    }

    public String updateTrans(double amount, String type) {
    //insert transaction
        //return transaction id  
        int t_id = Integer.parseInt(getMaxID("transaction", "transaction_id")) + 1;
        String str = "";
        try {

            Statement s = con.createStatement();
            String q = "insert into transaction(transaction_id,amount, t_date, type) values( " + t_id + ","
                    + amount + ", current_timestamp , '" + type + "')";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Transactions Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Updating Transactions Complete");
            }

            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Transactions. " + ex.getMessage() + " " + ex.toString());
        }
        return str + t_id;

    }

    public void insertTrades(String id, String ticker, String tID, String type, String action, double price, int quantity, int quantity_left,
            String purchasedate) {
    // there is a check in the trades table
        // type must be 'Stocks' or 'Mutual Funds'
        System.out.println(tID);
        System.out.println("insertTrades date parameter:" + purchasedate);
        String str = "";
        if (type.equals("stock")) {
            str = "Stocks";
        } else if (type.equals("mutual_funds")) {
            str = "Mutual Funds";
        }
        try {
            Statement s = con.createStatement();
            String q="";
            
            
            if(purchasedate.equals("current_timestamp")){
               q = "insert into trade( acc_number, ticker, transaction_id, type, action, purchase_price,"
                    + "quantity, quantity_left, purchase_date) values( "
                    + id + ",'" + ticker + "'," + tID + ",'" + type + "','" + action + "'," + price + "," 
                    + quantity + "," + quantity_left + ",current_timestamp)"; 
            }
            else{
            q = "insert into trade( acc_number, ticker, transaction_id, type, action, purchase_price,"
                    + "quantity, quantity_left, purchase_date) values( "
                    + id + ",'" + ticker + "'," + tID + ",'" + type + "','" + action + "'," + price + "," 
                    + quantity + "," + quantity_left + ",'"+purchasedate+"')";
            }
            
            
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Trades Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Successful update of Trades");
            }
            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Trades: InsertTrades method  " + ex.toString());
        }

    }

    public String getInvestValue(String id, String ticker){
         String val="0";
        try {
            String text = account_field.getText().toString().trim();
            Statement s = con.createStatement();
            String q = "select amount from investment_acc where ticker ='" + ticker+"'";
            ResultSet result = s.executeQuery(q);

            if (!result.next()) {
                System.out.println("Could not investment balance");
                s.close();
                return "0";
            } else {
                ResultSetMetaData rsmd;
                rsmd = result.getMetaData();
                do {

                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                       val= result.getString(i);

                    }

                } while (result.next());
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Find Investment Balance"+ex.toString());
        } catch (NullPointerException ex) {
            System.out.println("Error When Trying to Find Investment Balance"+ex.toString());
        }

        return val;
    }
    
    public String getDateOpened(String id){
        String date="";
        try {
           
                Statement s = con.createStatement();
                String q = "select to_char(date_opened,'DD-MON-YY HH.MI.SSSSSSSSS AM') from account where acc_number="+id;
                ResultSet result=s.executeQuery(q);
                if(!result.next()){
                    System.out.println("No date was found");
                }
                else{
                    date=result.getString(1);
                    System.out.println("Date for Account: "+date);
                }
                s.close();
            } catch (SQLException ex) {
            System.out.println("Error When Trying to find open date. :  " + ex.toString());
        }
        return date;
    }
    
    
    public void updateInvestments(int quantity, String ticker, String id, String balance) {
        try {
            boolean found = search_invest_act(ticker, id);

            if (quantity == 0) {
                //if the amount of stocks/mf the client has is 0
                //then that person doesn't own it anymore
                //delete the investment tuple.
                deleteInvestment(ticker, id);
            } else if (found) {
                Statement s = con.createStatement();
                String q = "update investment_acc set shares= " + quantity + ", amount=" + balance
                        + " where ticker = '" + ticker + "' AND acc_number = " + id;
                int update = s.executeUpdate(q);
                if (update == 0) {
                    System.out.println("Updating Investments Failed: Possible incorrect ticker or id");
                }

                s.close();
            } else if (!found) {
                Statement s = con.createStatement();
                String dateopened=getDateOpened(id);
                String q = "insert into investment_acc(shares, amount,acc_number,ticker) values("
                        + quantity + "," + balance + "," + id + ",'" + ticker + "')";
                int update = s.executeUpdate(q);
                if (update == 0) {
                    System.out.println("Updating Investments Failed: Possible incorrect ticker or id");
                }

                s.close();
            }

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Investment. :  " + ex.toString());
        }
    }

    public void deleteInvestment(String ticker, String id) {
        try {
            Statement s = con.createStatement();
            String q = "delete from investment_acc where ticker = '" + ticker + "' AND acc_number = " + id;
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Deleting Investments Failed: Possible incorrect ticker or id");
            }
            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Find Investment.");
        }

    }

    public String findInvestment(String ticker, String type) {
        String price = "";
        System.out.println(ticker);
        System.out.println(type);
        try {
            Statement s = con.createStatement();
            String q = "select price from " + type + " where ticker = '" + ticker + "'";
            ResultSet result = s.executeQuery(q);
            ResultSetMetaData rsmd;

            if (!result.next()) {
                System.out.println("Investment does not exist");

                s.close();
            } else {
                rsmd = result.getMetaData();
                do {
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        price = result.getString(i);

                    }
                } while (result.next());

            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Find Investment.");
        }

        return price;
    }
    
    public boolean qCheck(String q){
         boolean flag = true;
        char c = '.';
        Scanner s = new Scanner(q.replaceAll(" ",""));
        if (s.hasNextInt()) {
            int d = s.nextInt(); 
        } else {
            System.out.println("Price is invalid :  " + q);
            flag = false;
        }
        s.close();
        return flag;
    }
    
    
    private void trade_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_submitActionPerformed

        String id = invest_acc.getSelectedItem().toString().trim();
        String cashid = trade_cash_account.getSelectedItem().toString().trim();
        String ticker = trade_ticker.getText().toUpperCase();
        String security = trade_security.getSelectedItem().toString();
        String action = trade_action.getSelectedItem().toString();
        String cashtype = trade_cash.getSelectedItem().toString();
        if (!qCheck(trade_quantity.getText().toString()) || trade_quantity.getText().toString().contains(" ") ) {
            System.out.println("Error. User entered an invalid quantity" + loan_amount.getText().toString());
             messageUser("Error please Enter a valid quantity");
        }
        else{
            
        int quantity = Integer.parseInt(trade_quantity.getText().toString());

        boolean exist = true;
        boolean found = findinvestment(ticker, security);
        String q = "";

        //find current market price
        double price=0;
        if(security.equals("mutual_funds")){
            price=findMFPrice(ticker);
        }
        else{
        price = Double.parseDouble(findInvestment(ticker, security));
        }
        if (found) {
            // first check buy or sell
            if (action.equals("Buy")) {
                double funds = findfunds(cashid, cashtype);
                buySecurity(id, cashid, ticker, security, quantity, price, funds, cashtype);
            } else if (action.equals("Sell")) {
                double funds = findfunds(cashid, cashtype);
                sellSecurity(id, cashid, ticker, security, quantity, price, funds, cashtype);
            }
        } else {
            //insert stock
            System.out.println("No stocks were found");
            messageUser("Not a Valid Ticker. Please enter a valid ticker");
        }

        Component frame = null;

        JOptionPane.showMessageDialog(frame,
                "Trade Successful"
                + "Thank you for trading at Merry Lunch ",
                "", JOptionPane.PLAIN_MESSAGE
        );

        getMyTrades(id);  

        //Check if Ticker Exists
        //Check if Quantity is valid
        //Get Security Type
        //Get Action Type
        // Update trade table and transaction table
        // Update User's Investment Accounts by debit it
        // Update User's Cash Management Account by crediting it
        // Let user choose either savings or checkings
    }//GEN-LAST:event_trade_submitActionPerformed
    }
    private void query_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_query_submitActionPerformed
        result_text.setText("");
        String querystr = query_ticker.getText();
        String type = query_type.getSelectedItem().toString();

        boolean flag = false;
        try {
            Statement s = con.createStatement();
            String q = "";
            ResultSet result;
            if (type.equals("Stock")) {
                q = "select * from stock where ticker='" + querystr + "'";
            } else if (type.equals("Mutual Fund")) {
                q = "select * from mutual_funds where ticker=" + querystr;
            } else {
                // return invalid input.
            }
            result = s.executeQuery(q);
            /*
             if (!result.next()) System.out.println ("Empty result.");
             else {
             do {
             System.out.println (result.getString("customer_id"));
             flag=true;
             } while (result.next());
             }
             */

            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("Empty result.");

                /*
                 return no results to textarea
                 */
                result_text.append("Security Ticker does not exist");
                main.setVisible(false);
                results.setVisible(true);

            } else {
                //System.out.println (result.getString("name") + " " + result.getString("id"));
                rsmd = result.getMetaData();

                System.out.println("Number of Columns :" + rsmd.getColumnCount());
                System.out.println("");

                //System.out.printf("%s",rsmd.getColumnName(1));
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    System.out.printf("%-30s", rsmd.getColumnName(i));
                    String str = String.format("%-30s", rsmd.getColumnName(i));
                    result_text.append(str);

                }
                result_text.append("\n");
                System.out.println();

                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        String columnValue = result.getString(i);
                        System.out.printf("%-30s", columnValue);
                        String str = String.format("%-30s", columnValue);
                        result_text.append(str);
                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

            }

            if (flag) {
                //hide the frame and set frame2 to be visible.

                main.setVisible(false);
                results.setVisible(true);
            }

            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_query_submitActionPerformed

    private void query_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_query_logoutActionPerformed
        try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);

    }//GEN-LAST:event_query_logoutActionPerformed

    private void cash_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_submitActionPerformed
        //use this code to dynamically change the combo box
        //to display the users accounts
        // when doing fund transfers 
        /*
        if (!pcheck(loan_amount.getText().toString()) || loan_amount.getText().toString().contains(" ")) {
            System.out.println("Error. User entered an invalid amount to borrow for a loan." + loan_amount.getText().toString());
             messageUser("Error please Enter a valid amount for the loan");
        }
        */
        if (!checkid(cash_account.getSelectedItem().toString())|| cash_amount.getText().contains(" ") 
                || !pcheck(cash_amount.getText())) {
            System.out.println("Invalid Integer ID or Invalid Amount" + cash_account.getSelectedItem().toString());
            messageUser("Error please Enter a valid ID or Valid Amount"+ cash_amount.getText());
        } else {
            int id = Integer.parseInt(cash_account.getSelectedItem().toString());
            String q = "";
        //Do query to find all of the accounts assoicated with the customer id
            // Query each account id inside all types of account tables
            boolean flag = false;

            try {

                String action = "view";
                // if the customers wants to withdraw
                if (cash_action.getSelectedItem().toString().equals("withdraw")) {
                    action = "withdraw";
                } else if (cash_action.getSelectedItem().toString().equals("deposit")) {
                    action = "deposit";
                } else {
                    action = "view";
                }

                if (action.equals("withdraw") || action.equals("deposit")) {

                    double num = 0;
                    System.out.println(cash_account.getSelectedItem().toString());
                    System.out.println(cash_to_account.getSelectedItem().toString());
                    q = "select " + cash_to_account.getSelectedItem().toString() + " from CASH_MGM_ACC "
                            + " WHERE acc_number="
                            + Integer.parseInt(cash_account.getSelectedItem().toString());
                    System.out.println(q);
                    Statement s = con.createStatement();
                    ResultSet result;
                    result = s.executeQuery(q);
                    ResultSetMetaData rsmd;
                    if (!result.next()) {
                        System.out.println("Empty CASH MGM SUBMIT RESULT");
                    } else {
                        rsmd = result.getMetaData();
                        do {
                            for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                                num = Double.parseDouble(result.getString(i));

                            }
                        } while (result.next());

                        s.close();

                        boolean isnum = true;
                        String text = cash_amount.getText().toString();
                        char[] ch = text.toCharArray(); // check if user input is actually a number
                        for (int i = 0; i < text.length(); i++) {
                            if (!Character.isDigit(ch[i])) {
                                isnum = false;
                            }

                        }
                    // check if the input is a number

                        if (isnum) {

                            if (action.equals("deposit")) {
                                num += Double.parseDouble(cash_amount.getText().toString());
                            } else if (action.equals("withdraw")) {
                                num -= Double.parseDouble(cash_amount.getText().toString());
                            }
                            // execute updates
                            if ((num >= 0)) // check if balance is negative.
                            // set the checkings or savings to the new balance for the customer's account
                            {
                                q = "update CASH_MGM_ACC SET " + cash_to_account.getSelectedItem().toString() + "=" + num
                                        + " WHERE ACC_NUMBER = "
                                        + Integer.parseInt(cash_account.getSelectedItem().toString());
                            }
                            /*
                             UPDATE Customers
                             SET ContactName='Alfred Schmidt', City='Hamburg'
                             WHERE CustomerName='Alfreds Futterkiste';
                             */

                            s = con.createStatement();
                            s.executeUpdate(q);

                            s.close();
                        //insert transactions
                            //insert into transaction(AMOUNT,type,T_DATE) VALUES(10000,'Transfers',current_timestamp);
                            
                            //UPDATE TRANSFERS
                            String trans_id=updateTrans(Double.parseDouble(cash_amount.getText()),action);
                            
                            
//                            int t_id = Integer.parseInt(getMaxID("transaction", "transaction_id")) + 1;
//                            q = "insert into transaction(transaction_id,AMOUNT,type,T_DATE) VALUES(" + t_id+","
//                                    + Double.parseDouble(cash_amount.getText().toString()) + ",'" + action + "',current_timestamp)";
//                            s = con.createStatement();
                            System.out.println("Successful Transaction : " + q);
//                            s.executeUpdate(q);
//                            s.close();
                        } else {
                            System.out.println("Error: Invalid Input for Cash Management");
                            Component frame = null;
                            JOptionPane.showMessageDialog(frame,
                                    "Invalid Value\n"
                                    + "Please enter a valid value.",
                                    "", JOptionPane.PLAIN_MESSAGE
                            );
                        }
                    }
                } else if (action.equals("view")) {
             // if the customer wants to view his balance.

                    Statement s = con.createStatement();
                    //select * from owns natural join CASH_MGM_ACC where owns.CUSTOMER_ID=52;
                    q = "select * from owns natural join CASH_MGM_ACC where owns.CUSTOMER_ID="
                            + Integer.parseInt(account_field.getText().toString());
                    ResultSet result;
                    result = s.executeQuery(q);
                    result_text.setText("");
                    ResultSetMetaData rsmd;
                    if (!result.next()) {
                        System.out.println("Empty result.");
                        result_text.append("Error");
                        main.setVisible(false);
                        results.setVisible(true);

                    } else {

                       
                        
                        result_text.append(String.format("%-20s", "acc_number"));
                        result_text.append(String.format("%-30s", "customer_id"));
                        result_text.append(String.format("%-30s", "checking_balance"));
                        result_text.append(String.format("%-30s", "savings_balance"));
                        result_text.append(String.format("%-50s", "date_last_accessed"));
                        result_text.append(String.format("%-30s", "maximum_checking"));
                        result_text.append(String.format("%-30s", "maximum_savings"));
                        
                        
                        result_text.append("\n");
                        System.out.println();

                        do {
                            result_text.append(String.format("%-40s", result.getString(1).trim()));
                            result_text.append(String.format("%-40s", result.getString(2).trim()));
                            result_text.append(String.format("%-40s", result.getString(3).trim()));
                            result_text.append(String.format("%-30s", result.getString(4).trim()));
                            result_text.append(String.format("%-50s", result.getString(5).trim()));
                            result_text.append(String.format("%-30s", result.getString(6).trim()));
                            result_text.append(String.format("%-30s", result.getString(7).trim()));
                            
                            System.out.println("");
                            result_text.append("\n");
                            flag = true;
                        } while (result.next());

                    }

                    if (flag) {
                        //hide the frame and set frame2 to be visible.

                        main.setVisible(false);
                        results.setVisible(true);
                    }
                    s.close();
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        //drop down example
        // Investments : 810102
        // Cash Management : 120202
        // Cash Management : 20302
        // Investments : + ID
        // Cash Management : + ID
        // Cash Management : + ID
//        ArrayList<String> arr=new ArrayList<String>();
//        arr.add("1");
//        arr.add("2");
        //Check if Ticker Exists
        //Check if Quantity is valid
        //Get Security Type
        //Get Action Type
        // Update trade table and transaction table
        // Update User's Investment Accounts by debit it
        // Update User's Cash Management Account by crediting it
        // Let user choose either savings or checkings
    }//GEN-LAST:event_cash_submitActionPerformed

    public void findAccount() {
        int id = Integer.parseInt(account_field.getText().toString());
        String q = "select acc_number from owns natural join CASH_MGM_ACC where customer_id=" + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Cash Management Accounts");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                   
                } while (result.next());

               
            }
            
             String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                cash_account.setModel(model);
                trade_cash_account.setModel(model);
                loan_cash.setModel(model);
                cash_transfer_from_id_list.setModel(model);
                retirement_cash.setModel(model);

                // this is used because both lists were simultaneously the same.
                String[] newarr2 = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model2 = new DefaultComboBoxModel(newarr2);
                cash_transfer_to_id_list.setModel(model2);
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void getInvestAcc() {
        int id = Integer.parseInt(account_field.getText().toString());
        String q = "select distinct acc_number from owns natural join account where acc_type='investment' AND customer_id = " + id;
         List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Investment Accounts");
                arr.add("none");
            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        //System.out.println(result.getString(i));
                        arr.add(result.getString(i));

                    }
                   
                } while (result.next());

              

            }
             String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                invest_acc.setModel(model);
                investment_transfer_from_id_list.setModel(model);
                
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
     public void getRetirementAcc() {
        int id = Integer.parseInt(account_field.getText().toString());
        String q = "select distinct acc_number from owns natural join retirement_acc where customer_id = " + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Retirement Accounts");
                arr.add("none");
            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        System.out.println("retirement account result" + result.getString(i));
                        arr.add(result.getString(i));

                    }
                    
                    flag = true;
                } while (result.next());

                

            }
            String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                invest_acc.setModel(model);
                investment_transfer_from_id_list.setModel(model);
               
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

//   public void getMyStocks(String act_id){
//        
//        String q="select ticker from investment_acc where acc_number = "+act_id;
//       
//        boolean flag=false;
//         try {
//            Statement s=con.createStatement();
//            ResultSet result;
//            result = s.executeQuery(q);
//            ResultSetMetaData rsmd;
//            if (!result.next()) {
//                System.out.println("No Investment Accounts");
//                
//
//            } else {
//                rsmd = result.getMetaData();
//                ArrayList<String> arr=new ArrayList<String>();
//                do {
//
//                    //System.out.printf("%s",result.getString(1));
//                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
//                        
//                        arr.add(result.getString(i));
//                        
//                    }
//                    System.out.println("");
//                    result_text.append("\n");
//                    flag=true;
//                }while (result.next());
//
//                
//                String[] newarr = new String[arr.size()];
//                newarr = arr.toArray(newarr);
//                DefaultComboBoxModel model = new DefaultComboBoxModel( newarr );
//                investment_list.setModel(model);
//             
//                
//            }
//            s.close();
//
//        } catch(Exception e){
//            e.printStackTrace();
//        }
//    } 
    public void getMyTrades(String act_id) {

//        String q="select transaction_id, purchase_price, quantity from trade "
//                + "where acc_number = "+act_id;
        if(act_id.equals("none")){
            System.out.println("No Trades were found");
        }
        else{
        String q = "select transaction_id from trade "
                + "where acc_number = " + act_id + ""
                + "AND action='buy'";
        List<String> arr = new ArrayList<>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Trades were found");
                arr.add("None");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    arr.add(result.getString(1));
//                        my_quantity.setText(result.getString(2));
//                        my_price.setText(result.getString(3));

                        // update quantity box : my_quantity
                    // update price box : my_price
                } while (result.next());

               

            }
            String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                investment_purchases.setModel(model);
                transfer_investment_trade_id.setModel(model);
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }
    


    private void query_view_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_query_view_allActionPerformed
        String querystr = query_ticker.getText();
        String type = query_type.getSelectedItem().toString();

        boolean flag = false;
        try {
            Statement s = con.createStatement();
            String q = "";
            ResultSet result;
            if (type.equals("Stock")) {
                q = "select * from stock";
            } else if (type.equals("Mutual Fund")) {
                q = "select * from mutual_funds";
            } else {
                // return invalid input.
            }
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("Empty result.");
                result_text.append("Security Ticker does not exist");
                main.setVisible(false);
                results.setVisible(true);
            } else {
                rsmd = result.getMetaData();
                System.out.println("Number of Columns :" + rsmd.getColumnCount());
                System.out.println("");
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    System.out.printf("%-30s", rsmd.getColumnName(i));
                    String str = String.format("%30s \t\t", rsmd.getColumnName(i));
                    result_text.append(str);
                }
                result_text.append("\n");
                System.out.println();

                do {
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        String columnValue = result.getString(i);
                        System.out.printf("%-30s ", columnValue);
                        String str = String.format("%30s \t\t", columnValue);
                        result_text.append(str);
                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

            }

            if (flag) {
                //hide the frame and set frame2 to be visible.
                main.setVisible(false);
                results.setVisible(true);
            }

            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_query_view_allActionPerformed


    private void cash_actionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_actionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cash_actionActionPerformed

    private void cash_amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cash_amountActionPerformed

    private void cash_accountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_accountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cash_accountActionPerformed

    private void cash_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_logoutActionPerformed
        try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);
    }//GEN-LAST:event_cash_logoutActionPerformed

    private void transfer_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfer_logoutActionPerformed
        try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);
    }//GEN-LAST:event_transfer_logoutActionPerformed

    private void trade_cashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_cashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trade_cashActionPerformed

    private void trade_securityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_securityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trade_securityActionPerformed

    private void investment_purchasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_investment_purchasesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_investment_purchasesActionPerformed

    private void trade_displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_displayActionPerformed
        /*19-APR-14 08.29.56.892661000 PM*/
        String q = "select purchase_price, quantity_left, ticker, to_char(purchase_date,'DD-MON-YY HH.MI.SS.SSSSSSSSS AM')"
                + " as purchase_date "
                + " from trade "
                + " where acc_number = " + invest_acc.getSelectedItem().toString() + ""
                + " AND transaction_id= " + investment_purchases.getSelectedItem().toString();
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Trades Found");
                

            } else {
                rsmd = result.getMetaData();
               
                do {

                    //System.out.printf("%s",result.getString(1));
//                        arr.add(result.getString(1));
                    my_price.setText(result.getString(1));
                    my_quantity.setText(result.getString(2));
                    trade_ticker.setText(result.getString(3));
                    my_date.setText(result.getString(4));

                        // update quantity box : my_quantity
                    // update price box : my_price
                } while (result.next());

//                String[] newarr = new String[arr.size()];
//                newarr = arr.toArray(newarr);
//                DefaultComboBoxModel model = new DefaultComboBoxModel( newarr );
//                investment_list.setModel(model);
            }
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_trade_displayActionPerformed

    public void findloan() {

        String q = "select loan_id from takes_out natural join loans where customer_id = " + account_field.getText().toString();
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Loans were found");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
               
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                  
                } while (result.next());

               

            }
            String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                loan_account.setModel(model);
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void UpdateLoan(String id, double paid, double owed) {
        try {
            Statement s = con.createStatement();
            String q = "update loans set amount_paid =" + paid + ", amount_unpaid =" + owed
                    + " where loan_id= " + id;
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Loan Failed:");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Updating  Loan Failed: " + ex.toString());
        }
    }

    public void UpdateInterest(String id, double owed, double paid) {
        try {
            Statement s = con.createStatement();
            String q = "update loans set interest_owed=" + owed + ", interest_paid =" + paid + " where "
                    + "loan_id=" + id;
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Interest in Loan Failed:");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Updating Interest in Loan Failed: " + ex.toString());
        }
    }

    public int InsertLoan(String cashact, String cashtype, double borrowed,
            double interest, double total, int year, int month, int day) {
        int id = Integer.parseInt(getMaxID("loans", "loan_id"));
        System.out.println(getMaxID("loans", "loan_id"));
        id = id + 1;
        try {
            Statement s = con.createStatement();
            String q = "insert into loans(loan_id,interest_rate,amount_unpaid,amount_paid,amount_borrowed"
                    + ",interest_owed,interest_paid,date_borrowed)"
                    + " values(" + id
                    + "," + interest + "," + total + ",0," + total 
                    + ",0,0,current_timestamp)";

            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Loan Table failed.");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to update loan table :" + ex.toString());
        }
        return id;
    }

    public void InsertTakesOut(String loanid) {
        try {
            Statement s = con.createStatement();
            String q = "insert into takes_out(customer_id,loan_id) values(" + account_field.getText().toString()
                    + "," + loanid + ")";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Cash MGM account Failed: Possible incorrect  id");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to insert into takes out table" + ex.toString());
        }
    }


    private void loan_borrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loan_borrowActionPerformed
        /*
         Select loan account
         Select cash_mgm_account
         Get Cash type
         Get amount
         Store amount and interest rate
         Debit  cash_mgm_account
         Credit Loans
        
         UpdateCash
        
         Query the maximum loan id + 1
         to get loan id.
         InsertLoan
        
        
         */

        if (!pcheck(loan_amount.getText().toString()) || loan_amount.getText().toString().contains(" ")) {
            System.out.println("Error. User entered an invalid amount to borrow for a loan." + loan_amount.getText().toString());
             messageUser("Error please Enter a valid amount for the loan");
        } else {
            String cashacct = loan_cash.getSelectedItem().toString();
            String cashtype = loan_cash_type.getSelectedItem().toString();
            String loanacct = loan_account.getSelectedItem().toString();
            double amount = Double.parseDouble(loan_amount.getText().toString());
            double interest = Double.parseDouble(loan_interest.getText().toString());
            /*
             Get date, month, year of today.
             */
            Calendar c = Calendar.getInstance();
            int year = c.get(c.YEAR);
            int month = c.get(c.MONTH) + 1;
            int day = c.get(c.DAY_OF_MONTH);
            // Sunday = day=1  and Saturday is day=7;
       
            double bal = findfunds(cashacct, cashtype);
            if(bal<1000){
                //Deny the customer to borrow the loan
                // since they are below the asset value of 1000
                messageUser("Warning your account is below the asset value of 1000 which is the minimum to borrow to funds");
                
            }
            else{
                
                int newid = InsertLoan(cashacct, cashtype, amount, interest, amount, year, month, day);
            System.out.println("new loan id  " + newid);
            InsertTakesOut("" + newid);
            bal = bal + amount;
            updateCashAcc(cashacct, bal, cashtype, "" + bal);
            
            //update transaction
            updateTrans(amount,"loan");
            
            //update list of laons
            findloan();
        }
        }
    }//GEN-LAST:event_loan_borrowActionPerformed

    private void loan_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loan_payActionPerformed
        if (!pcheck(loan_amount.getText().toString())|| loan_amount.getText().toString().contains(" ")) {
            System.out.println("Error. User entered an invalid amount to pay for a loan." + loan_amount.getText().toString());
            messageUser("Error please Enter a valid amount for the loan");
        } else {
            String cashacct = loan_cash.getSelectedItem().toString();
            String cashtype = loan_cash_type.getSelectedItem().toString();
            String loanid = loan_account.getSelectedItem().toString();
            double paid = Double.parseDouble(loan_amount.getText().toString());
            double interest = Double.parseDouble(loan_interest.getText().toString());
            double owed = Double.parseDouble(findLoanAmount(loanid)) - paid;
            UpdateLoan(loanid, paid, owed);

            //find balance
            double bal = findfunds(cashacct, cashtype);
            bal = bal - paid;
            updateCashAcc(cashacct, bal, cashtype, "" + bal);
            //updat transaction
            updateTrans(paid,"loan");
        }

    }//GEN-LAST:event_loan_payActionPerformed

    public String findLoanAmount(String id) {

        String q = "select amount_borrowed from loans where loan_id = " + id;

        String amount = "0";
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Loan found");
            } else {
                rsmd = result.getMetaData();
                do {
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        amount = result.getString(i);

                    }
                } while (result.next());
            }
            s.close();
            result.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amount;
    }

    public String[] findDate(String id) {

//        String q = "select year_borrowed, month_borrowed, day_borrowed, interest_paid from loans where loan_id = " + id;
        String q = "select to_char(date_borrowed, 'MM/DD/YYYY HH:MI:SSAM') as date_borrowed, interest_paid from loans where loan_id = " + id;
        //to_char(date_borrowed, 'MM/DD/YYYY HH:MI:SSAM') as date_borrowed
//        int[] arr = new int[4];
        String[] arr = new String[2];
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Loan found");
            } else {
                rsmd = result.getMetaData();
                int j = 0;
                do {
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

//                        arr[i - 1] = Integer.parseInt(result.getString(i));
                          arr[i-1]= result.getString(i);
                    }
                } while (result.next());
            }
            s.close();
            result.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return arr;
    }


    private void pay_interestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pay_interestActionPerformed

        /*
         Query Year,month,day
         Compare with today
         if month and day are equal
         take year and get difference
         difference = y1-y2
         interest_owed= difference * interest rate * amount_borrowed
        
         Interest_paid must be <= interest_owed
         update interest_owed= difference * interest rate * amount_borrowed
         update interest_paid
         */
        if (!pcheck(loan_amount.getText().toString()) || loan_amount.getText().toString().contains(" ")) {
            System.out.println("Error. User entered an invalid amount to borrow for a loan." + loan_amount.getText().toString());
            messageUser("Error please Enter a valid amount to pay interest");
        } else {
            String cashacct = loan_cash.getSelectedItem().toString();
            String cashtype = loan_cash_type.getSelectedItem().toString();
            String loanid = loan_account.getSelectedItem().toString();
            double interest_paid = Double.parseDouble(loan_amount.getText().toString());
            double interest = Double.parseDouble(loan_interest.getText().toString());

            /*
             Get date, month, year of today.
             */
//            Calendar c = Calendar.getInstance();
//            int year = c.get(c.YEAR);
//            int month = c.get(c.MONTH) + 1;
//            int day = c.get(c.DAY_OF_MONTH);
        // Sunday = day=1  and Saturday is day=7;

            int difference = 0;
            String[] arr = findDate(loanid);
            
            
            
//            if (month == arr[1] && day == arr[2]) {
//                difference = year - arr[0];
//            }
//            double interest_owed = difference * interest * Double.parseDouble(findLoanAmount(loanid));
            
            double interest_owed = Double.parseDouble(findLoanAmount(loanid)) * interest * getYear(arr[0]);
            
            BigDecimal bd = new BigDecimal(Double.toString(interest_owed));
            bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
            interest_owed=bd.doubleValue();

            System.out.println("Owed Interest :"+interest_owed);
        // check
            //arr[3] is the interest_paid data from the query
            //interest_paid + interest that is already paid.
            if ((interest_paid + Double.parseDouble(arr[1])) <= interest_owed) {
                //update interest for loan.
                UpdateInterest(loanid,interest_owed,(interest_paid+ Double.parseDouble(arr[1])));
                double bal = findfunds(cashacct, cashtype);
                // credit cash mgm account
                bal = bal - interest_paid;
                updateCashAcc(cashacct, bal, cashtype, "" + bal);
            } else {
                System.out.println("You paid too much interest \n Payment is cancelled");
                Component frame = null;
                JOptionPane.showMessageDialog(frame,
                        "You do not have any interest left to pay\n"
                        + "Payment is cancelled.",
                        "", JOptionPane.PLAIN_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_pay_interestActionPerformed

    public int getYear(String t){
        try {
            // if month, day, hour , minute, seconds, 
            // is >= to original
            // do Year2 - Year 1 >0
            // update interest owed.
            
            //  28-MAR-14 10.50.12.739119000 PM
            //1992/10/04:10/32/32AM
            //String t="1992/04/17:07/19/59PM";
            //04/17/1994 10:59:10PM
            SimpleDateFormat old = new SimpleDateFormat("MM/dd/yyyy hh:mm:ssa");
            //1992/10/04:10/32/32AM
            SimpleDateFormat current = new SimpleDateFormat("yyyy/MM/dd:hh/mm/ssa");
           //2014-04-17 19:59:10.4649
            SimpleDateFormat year = new SimpleDateFormat("yyyy");
            SimpleDateFormat month = new SimpleDateFormat("MM");
            SimpleDateFormat day = new SimpleDateFormat("dd");
            SimpleDateFormat hour = new SimpleDateFormat("hh");
            SimpleDateFormat minutes = new SimpleDateFormat("mm");
            SimpleDateFormat seconds = new SimpleDateFormat("ss");
            SimpleDateFormat period = new SimpleDateFormat("a");
            System.out.println("Before parsing"+t);
            Date date = old.parse(t);
            String ofYear = year.format(date);
            String ofMonth = month.format(date);
            String ofDay = day.format(date);
            String ofHour = hour.format(date);
            String ofMinutes = minutes.format(date);
            String ofSeconds = seconds.format(date);
            String ofPeriod = period.format(date);
            
            
            System.out.println("Converted Date :" + ofYear);
            System.out.println("Converted Date :" + ofMonth);
            System.out.println("Converted Date :" + ofDay);
            System.out.println("Converted Date :" + ofHour);
            System.out.println("Converted Date :" + ofMinutes);
            System.out.println("Converted Date :" + ofSeconds);
            System.out.println("Converted Date :" + ofPeriod);
            System.out.println("Converted Double :" +Integer.parseInt(ofMonth));
             
            
            Calendar cal= Calendar.getInstance();
           
            
         
            
            String fYear = year.format(cal.getTime());
            String fMonth = month.format(cal.getTime());
            String fDay = day.format(cal.getTime());
            String fHour = hour.format(cal.getTime());
            String fMinutes = minutes.format(cal.getTime());
            String fSeconds = seconds.format(cal.getTime());
            String fPeriod = period.format(cal.getTime());
            DateFormat dateFormat= new SimpleDateFormat();
            System.out.println(dateFormat.format(cal.getTime()));
            System.out.println("Converted old Date :" + fYear);
            System.out.println("Converted Date :" + fMonth);
            System.out.println("Converted Date :" + fDay);
            System.out.println("Converted Date :" + fHour);
            System.out.println("Converted Date :" + fMinutes);
            System.out.println("Converted Date :" + fSeconds);
            System.out.println("Converted Date :" + fPeriod);
            System.out.println("Converted Double :" +Integer.parseInt(fMonth));
           
            
            
            boolean yearcheck2= Integer.parseInt(fYear)==Integer.parseInt(ofYear);
            boolean monthcheck= Integer.parseInt(fMonth)<Integer.parseInt(ofMonth);
            boolean monthcheck2= Integer.parseInt(fMonth)==Integer.parseInt(ofMonth);
            boolean daycheck= Integer.parseInt(fDay)<Integer.parseInt(ofDay);
            boolean daycheck2= Integer.parseInt(fDay)==Integer.parseInt(ofDay);
            boolean hourcheck= Integer.parseInt(fHour)<Integer.parseInt(ofHour);
            boolean hourcheck2= Integer.parseInt(fHour)==Integer.parseInt(ofHour);
            boolean minutescheck= Integer.parseInt(fMinutes)<Integer.parseInt(ofMinutes);
            boolean minutescheck2= Integer.parseInt(fMinutes)==Integer.parseInt(ofMinutes);
            boolean secondscheck= Integer.parseInt(fSeconds)<Integer.parseInt(ofSeconds);
            boolean secondscheck2= Integer.parseInt(fSeconds)==Integer.parseInt(ofSeconds);
            boolean periodcheck=fPeriod.equals("AM") && ofPeriod.equals("PM");
            boolean periodcheck2=fPeriod.equals(ofPeriod);
            int num= Integer.parseInt(fYear) - Integer.parseInt(ofYear);
            
            // Current year - original year = # of years
            
            if(num>0){
                
            if(yearcheck2 && monthcheck){ // if years are equal and this month is before original
                num--;
            }
            else if(monthcheck2 && daycheck){ // year,month is equal and day is before original.
                num--;
            }
            else if(monthcheck2 && daycheck2 && periodcheck ){ // if year,month,day is equal and its PM
                num--;
            }
            else if(monthcheck2 && daycheck2 && periodcheck2 && hourcheck){ 
            // if year,month,day,period are equal and hour is before original
                num--;
            }
            else if(monthcheck2 && daycheck2 && periodcheck2 && hourcheck2 && minutescheck){
                            // if year,month,day,period,hour are equal and minutes is before original
                num--;
            }
            else if(monthcheck2 && daycheck2  && periodcheck2 && hourcheck2 && minutescheck2 && secondscheck){
                            // if year,month,day,period,hour, minutes are equal and seconds is before original
                num--;
            }
            /*
            We have many cases.
            Case 1: month> month
            Case 2: month>= month day>day
            Case 3: month>= month day>=day hour
            
            
            */
          
       
                    }
            System.out.println("Number of years for interest"+num);  
            return num;
        } catch (ParseException ex) {
            System.out.println("Error when calculating years for interest " + ex.toString());
        }
        
     
        return 0;
    }
        
       
    public String findCashBal(String id, String type) {
        String q = "select " + type + " from cash_mgm_acc where acc_number= " + id;

        String amount = "0";
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No balance found");
            } else {
                rsmd = result.getMetaData();
                int j = 0;
                do {
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        amount = result.getString(i);

                    }
                } while (result.next());
            }
            s.close();
            result.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amount;
    }
    public String findAmount(String id){
        String q = "select amount from retirement_acc where acc_number= " + id +
                " AND asset='cash'";

        String amount = "0";
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No balance found");
            } else {
                rsmd = result.getMetaData();
                int j = 0;
                do {
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        amount = result.getString(i);

                    }
                } while (result.next());
            }
            s.close();
            result.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amount;
    }
    private void transfer_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfer_submitActionPerformed

        // if the same two accounts are selected
        //throw a warning to the user to resubmit.
        // update both cash mgm accounts
        if (!pcheck(transfer_cash.getText()) || transfer_cash.getText().contains(" ")) {
            System.out.println("Invalid Input in Transfering of Accounts");
            Component frame = null;
            JOptionPane.showMessageDialog(frame,
                    "Invalid Input in Transfering of Accounts\n"
                    + "Transfer is cancelled.",
                    "", JOptionPane.PLAIN_MESSAGE
            );
        } else {
            String fromacc=cash_transfer_acc1.getSelectedItem().toString();
            String toacc=cash_transfer_acc2.getSelectedItem().toString();
            String fromtype = cash_transfer_from_type.getSelectedItem().toString();
            String totype = cash_transfer_to_type.getSelectedItem().toString();
            String fromID = cash_transfer_from_id_list.getSelectedItem().toString();
            String toID = cash_transfer_to_id_list.getSelectedItem().toString();
            String amount = transfer_cash.getText().trim();
            if (fromID.equals(toID)) {
                Component frame = null;
                JOptionPane.showMessageDialog(frame,
                        "You cannot transfer to the same account\n"
                        + "Transfer is cancelled.",
                        "", JOptionPane.PLAIN_MESSAGE
                );
            } else {
                String bal="0";
                
                
                if(fromacc.equals("cash_mgm_acc")){
                    bal = findCashBal(fromID, fromtype);
                }
                else if(fromacc.equals("retirement_acc")){
                    bal=findAmount(fromID);
                }
                
                double amt = 0;
                
                // UPDATING FROM ACCOUNT
                
                if (pcheck(amount) && pcheck(bal)) {
                    // subtract from  the From account
                    amt = Double.parseDouble(bal) - Double.parseDouble(amount);
                    if (amt < 0) {
                        Component frame = null;
                        JOptionPane.showMessageDialog(frame,
                                "Insufficient Funds\n"
                                + "Transfer is cancelled.",
                                "", JOptionPane.PLAIN_MESSAGE
                        );
                    } else {
                        
                         if (fromacc.equals("cash_mgm_acc")) {
                           updateCashAcc(fromID, amt, fromtype, "" + amt);
                        } else if (fromacc.equals("retirement_acc")) {
                            //bal = findAmount(fromID);
                            updateRetirement(fromID,amount,"withdraw");
                        }
                        
                       
                        System.out.println("Successful update of from account :" + fromID);
                        
                        
                    }
                }
                
                else {
                    System.out.println("Invalid Input in Transfering of Accounts");
                    Component frame = null;
                    JOptionPane.showMessageDialog(frame,
                            "Invalid Input in Transfering of Accounts\n"
                            + "Transfer is cancelled.",
                            "", JOptionPane.PLAIN_MESSAGE
                    );
                }

                // UPDATING TO ACCOUNT
                double amt2 = 0;
                String bal2 = findCashBal(toID, totype);
                if (pcheck(amount) && pcheck(bal2)) {
                    
                    // subtract from  the From account
                    amt2 = Double.parseDouble(bal2) + Double.parseDouble(amount);
                    
                    
                     if (toacc.equals("cash_mgm_acc")) {
                           updateCashAcc(toID, amt2, totype, "" + amt2);
                        } else if (toacc.equals("retirement_acc")) {
                           
                            updateRetirement(toID,amount,"deposit");
                        }
                    
                    System.out.println("Successful transfer to account :" + toID);
                    
                } else {
                    System.out.println("Invalid Input in Transfering of Accounts");
                    Component frame = null;
                    JOptionPane.showMessageDialog(frame,
                            "Invalid Input in Transfering of Accounts\n"
                            + "Transfer is cancelled.",
                            "", JOptionPane.PLAIN_MESSAGE
                    );
                    
                    
                    // be able to rollback
                }
                
                
                // UPDATE TRANSACTIONS
                String t_id=updateTrans(Double.parseDouble(amount), "transfer");
                // UPDATE TRANSFERS TABLE
                // options are cash or investment
                insertTransfer(fromID,toID,t_id,"cash");
                
                

            }
        }
    }//GEN-LAST:event_transfer_submitActionPerformed

    
    public void insertTransfer(String fromAcc,String toAcc,String t_id,String type){
        System.out.println("Transaction :"+t_id);
        String str = "";
        try {
            Statement s = con.createStatement();
            String q="";

               q = "insert into transfer( from_acc_number, to_acc_number, transaction_id, type) values( "
                    + fromAcc + ","+ toAcc + "," + t_id +",'"+type+"')"; 

            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Transfers Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Successful update of Transfers");
            }
            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Transfers " + ex.toString());
        }
    }
    private void loan_amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loan_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loan_amountActionPerformed

    private void transfer_cashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfer_cashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transfer_cashActionPerformed

    private void loan_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loan_logoutActionPerformed
         try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);
    }//GEN-LAST:event_loan_logoutActionPerformed

    private void retirement_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirement_logoutActionPerformed
         try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);
    }//GEN-LAST:event_retirement_logoutActionPerformed

    private void management_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_management_logoutActionPerformed
         try {
            con.close();
            System.out.println("Disconnected");
            System.out.println("Verification : " + con.isClosed());
        } catch (Exception e) {
            e.printStackTrace();
        }

        login.setVisible(true);
        main.setVisible(false);
    }//GEN-LAST:event_management_logoutActionPerformed

    private void change_transaction_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change_transaction_listActionPerformed
        // change investment_purchases
        getMyTrades(invest_acc.getSelectedItem().toString());
        // to the related ids
    }//GEN-LAST:event_change_transaction_listActionPerformed

    private void change_account_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change_account_listActionPerformed
        // change invest_acc to retirement_acc numbers
        // if retirement_acc is selected
       if(trade_account_type.getSelectedItem().toString().equals("investment_acc")){
           getInvestAcc();
           System.out.println("Changed to investment accounts");
       }
       else if(trade_account_type.getSelectedItem().toString().equals("retirement_acc")){
        getRetirementAcc();   
        System.out.println("Changed to retirement accounts");
       }
        
        
        // if investment_acc is selected change back.
    }//GEN-LAST:event_change_account_listActionPerformed

    public String[] getRetirementCash(String deposit){
         String q = "select amount from retirement_acc where asset='cash' AND acc_number = " + account_field.getText().toString();
        List<String> arr = new ArrayList<String>();
        String[] newarr;
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Cash in Retirement found");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
               
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

               
                
               

            }
            
            s.close();
            

        } catch (Exception e) {
            e.printStackTrace();
        }
        newarr = arr.toArray(new String[arr.size()]);
        return newarr;
    }
    
    public boolean QueryRetirementBal(String id){
        String q = "select amount from retirement_acc where asset='cash' AND acc_number = " + id;
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Cash in Retirement were found");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                    flag=true;
                } while (result.next());


            }
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return flag;
    }
    
     public String FindRetirementBal(String id){
        String q = "select amount from retirement_acc where asset='cash' AND acc_number = " + id;
        String str="";
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Cash in Retirement were found");
                

            } else {
                rsmd = result.getMetaData();
               
                do {
                   
                    str=result.getString(1);
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
    
    public void updateRetirement(String id, String deposit, String action){
        // if cash tuple doesnt exist
        boolean exist=QueryRetirementBal(id);
        String bal=FindRetirementBal(id);
        double newbal=0;
        String q="";
        if(exist){
            if(action.equals("withdraw")){
                newbal=Double.parseDouble(bal)-Double.parseDouble(deposit);
                q="update retirement_acc set amount="+newbal+" where acc_number="+
                        id+" AND asset='cash'";
            }
            else if(action.equals("deposit")){
                // insert tuple
                newbal=Double.parseDouble(bal)+Double.parseDouble(deposit);
                q="update retirement_acc set amount="+newbal+" where acc_number="+
                        id+" AND asset='cash'";
            }
            
             try {
            Statement s = con.createStatement();
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Deposit/Withdraw Retirement Account Failed : Possible incorrect  id");
               
            }
            else{
                System.out.println("Successful "+action+" of Retirement Account" + id);
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error Deposit/Withdraw Retirement Account Failed " + ex.toString());
        }
            
            
            
        }
        else if(!exist){
            System.out.println("Cash Retirement doesnt exist");
        }
       
    }
    
    private void retirement_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirement_submitActionPerformed
        // retirement_list
        //retirement_deposit
        // retirement_cash
        //retirement_cash_type
        // retirement action
        String retire_id=retirement_list.getSelectedItem().toString();
        String deposit=retirement_deposit.getText();
        String cashact=retirement_cash.getSelectedItem().toString();
        String cashtype=retirement_cash_type.getSelectedItem().toString();
        String action=retirement_action.getSelectedItem().toString();
        
        
        //String[] selection=getRetirementCash(deposit); // returns the list of cash tuples that we can withdraw from.
        // we will use the FIFO method
        // arr
        String trans_id="Unsucessful transfer";
        //String balance=findRetirementBal(selection[0]); // gets the balance of the id
        double cashbal=findfunds(cashact,cashtype);
        double newcashbal=cashbal;
        if(!pcheck(deposit) || deposit.contains(" ")){
            System.out.println("Invalid Price for Retirement Deposit/Withdrawal");
            messageUser("Error please Enter a valid amount for the loan");
        }
        else{
            
        
        if(action.equals("deposit")){
            //String id, String deposit, String action, String program
            trans_id=updateTrans(Double.parseDouble(deposit), "deposit");
             System.out.println("transaction id: "+trans_id);
            updateRetirement(retire_id,deposit,action);
            
            newcashbal=newcashbal-Double.parseDouble(deposit);
            updateCashAcc(cashact, newcashbal, cashtype,""+newcashbal);
        }
        else if(action.equals("withdraw")){
           trans_id=updateTrans(Double.parseDouble(deposit), "withdraw"); 
            System.out.println("transaction id: "+trans_id);
            updateRetirement(retire_id,deposit,action);
                
            newcashbal=newcashbal+Double.parseDouble(deposit);
            updateCashAcc(cashact, newcashbal, cashtype,""+newcashbal);
        }
        
        // update retirement_acc
        messageUser("Condition of transaction :"+trans_id);
       
        }
    }//GEN-LAST:event_retirement_submitActionPerformed
    public int insertAccount(String customer_id, String accountType){
        int id=Integer.parseInt(getMaxID("account", "acc_number"));
        
        id=id+1;
        System.out.println("New ID : "+id);
        try {
            Statement s = con.createStatement();
            String q = "insert into account(acc_number,date_opened,acc_type) "
                    + "values(" + id
                    + ",current_timestamp,'" + accountType + "')";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Inserting New Account Failed : Possible incorrect  id");
                id=-1;
            }
            else{
                System.out.println("Successful creation of Account" + id);
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to create New Account" + ex.toString());
        }
        
        return id;
    }
    
    public void insertOwns(String customer_id, String account_id){
        
        try {
            Statement s = con.createStatement();
            String q = "insert into owns(customer_id,acc_number) "
                    + "values(" + customer_id
                    + "," + account_id + ")";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Inserting New Account Failed : Possible incorrect  id");
                
            }
            else{
                System.out.println("Successful creation of Customer Account relationship in owns");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Insert New Account in Owns" + ex.toString());
        }
        
      
    }
    
    public void insertCashMgm(String id){
         try {
            Statement s = con.createStatement();
            String q = "insert into cash_mgm_acc(checking_balance, savings_balance ,"
                    + " date_last_accessed, maximum_checking ,maximum_savings ,acc_number) "
                    + " values(0,0,current_timestamp,999999,999999,"
                    + id + ")";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Inserting New Cash Management Account Failed : Possible incorrect  id");
                
            }
            else{
                System.out.println("Successful creation of Cash Management Account");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Insert New Cash Management Account in Owns" + ex.toString());
        }
    }
//    public void insertInvestAct(String id){
//        try {
//            Statement s = con.createStatement();
//            String q = "insert into cash_mgm_acc(shares, amount, "
//                    + " date_last_accessed, maximum_checking ,maximum_savings ,acc_number) "
//                    + "values(0,0,current_timestamp,999999,999999,"
//                    + id + ")";
//            int update = s.executeUpdate(q);
//            if (update == 0) {
//                System.out.println("Inserting New Cash Management Account Failed : Possible incorrect  id");
//                
//            }
//            else{
//                System.out.println("Successful creation of Cash Management Account");
//            }
//
//            s.close();
//
//        } catch (SQLException ex) {
//            System.out.println("Error When Trying to Insert New Cash Management Account in Owns" + ex.toString());
//        }
//    }
    
    public void insertRetirementAcc(String customer_id,String id, String plan){
        try {
            Statement s = con.createStatement();
            String q = "insert into retirement_acc(plan, amount, "
                    + "acc_number, asset) "
                    + "values('"+plan+"',0,"+id+",'cash')";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Inserting New Retirement Account Failed : Possible incorrect  id");
                
            }
            else{
                System.out.println("Successful creation of Retirement Account");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Insert Retirement account" + ex.toString());
        }
    }
    private void account_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_openActionPerformed
        // note when creating retirement accounts.
        // also create an initial row for cash
        // so that they can withdraw and deposit
        String customer_id=account_field.getText();
        String type= account_type.getSelectedItem().toString();
        String plan= account_plan.getSelectedItem().toString();
        System.out.println("STARTING ACCOUNT CREATION PROCESS");
        if(type.equals("cash_mgm_acc")){
            // insert acccount
             int id = insertAccount(customer_id, "cash_management");
             if(id==-1){
                 
             }
             else{
            // insert owns
             
             insertOwns(customer_id,""+id);
            
            // insert cash mgm acc
             
             insertCashMgm(""+id);    
             
             messageUser("sucessful creation of "+type);
             }
            
             
             
        }
        else if(type.equals("investment_acc")){
            // insert acccount
            // insert owns
            // insert cash mgm acc
             int id = insertAccount(customer_id, "investment");
             if(id==-1){
                 
             }
             else{
            // insert owns
             
             insertOwns(customer_id,""+id);
            
             getInvestAcc();
             messageUser("sucessful creation of "+type);
             }
        }
        else if(type.equals("retirement_acc")){
            // insert acccount
            // insert owns
            // insert cash mgm acc
            int id = insertAccount(customer_id, "retirement");
             if(id==-1){
                 
             }
             else{
            // insert owns
             insertOwns(customer_id,""+id);
             // insert cash into retirement
             insertRetirementAcc(customer_id,""+id,plan);
             messageUser("sucessful creation of "+type);
                
             }
        }
        
                findAccount();
                getInvestAcc();
                getMyTrades(invest_acc.getSelectedItem().toString());
                findloan();
                findRetirement();
        System.out.println("END OF ACCOUNT CREATION PROCESS");
    }//GEN-LAST:event_account_openActionPerformed

    private void investment_transfer_change_fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_investment_transfer_change_fromActionPerformed
        /*
          private void change_transaction_listActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // change investment_purchases
        getMyTrades(invest_acc.getSelectedItem().toString());
        // to the related ids
    }                                                       

    private void change_account_listActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // change invest_acc to retirement_acc numbers
        // if retirement_acc is selected
       if(trade_account_type.getSelectedItem().toString().equals("investment_acc")){
           getInvestAcc();
           System.out.println("Changed to investment accounts");
       }
       else if(trade_account_type.getSelectedItem().toString().equals("retirement_acc")){
        getRetirementAcc();   
        System.out.println("Changed to retirement accounts");
       }
        */
        
        if(investment_transfer_acc_list.getSelectedItem().toString().equals("investment_acc")){
           getInvestAcc();
           System.out.println("Changed to investment accounts");
       }
       else if(investment_transfer_acc_list.getSelectedItem().toString().equals("retirement_acc")){
        getRetirementAcc();   
        System.out.println("Changed to retirement accounts");
       }
    }//GEN-LAST:event_investment_transfer_change_fromActionPerformed

    private void investment_transfer_change_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_investment_transfer_change_idActionPerformed
       // change investment_purchases
        getMyTrades(investment_transfer_from_id_list.getSelectedItem().toString());
        // to the related ids
    }//GEN-LAST:event_investment_transfer_change_idActionPerformed

    private void investment_transfer_change_toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_investment_transfer_change_toActionPerformed
        if(investment_transfer_acc_list2.getSelectedItem().toString().equals("investment_acc")){
           int id = Integer.parseInt(account_field.getText().toString());
        String q = "select distinct acc_number from owns natural join account where acc_type='investment' AND customer_id = " + id;
         List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Investment Accounts");
                arr.add("none");
            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        System.out.println(result.getString(i));
                        arr.add(result.getString(i));

                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

              

            }
             String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                investment_transfer_to_id_list.setModel(model);
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
           System.out.println("Changed to investment accounts");
       }
       else if(investment_transfer_acc_list2.getSelectedItem().toString().equals("retirement_acc")){
         int id = Integer.parseInt(account_field.getText().toString());
        String q ="select acc_number from owns natural join account where customer_id ="+ id +" AND acc_type='retirement'";
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Retirement Accounts");
                arr.add("none");
            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        System.out.println("retirement account result" + result.getString(i));
                        arr.add(result.getString(i));

                    }
                    
                    flag = true;
                } while (result.next());

                

            }
            String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                investment_transfer_to_id_list.setModel(model);
                
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Changed to retirement accounts");
       }
    }//GEN-LAST:event_investment_transfer_change_toActionPerformed

    public String findQuantityLeft(String ticker, String t_id, String acc_number){
        String str="";
         String q = "select quantity_left from trade where ticker='"+ticker+
                 "' AND transaction_id = "+t_id+" AND action='buy' AND acc_number = "+acc_number;
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Quantity was found");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
                   
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
    
    public String findQuantity(String ticker, String t_id, String acc_number){
        String str="";
         String q = "select quantity from trade where ticker='"+ticker+
                 "' AND transaction_id = "+t_id+" AND action='buy' AND acc_number = "+acc_number;
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Quantity was found");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
                   
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
    
    public String getTicker(String t_id, String acc_number){
        String str="";
        System.out.println("Parameters for getTicker are "+t_id+" "+acc_number);
         String q = "select ticker from trade where transaction_id = "+t_id+" AND acc_number = "+acc_number;
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Ticker was found");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
                   
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
        
  public String getShares(String id, String type, String t_id, String ticker){
      // this looks into the table investment or retirement
      // it looks at the amount of total shares there are
      String q="";
      String str="";
      if(type.equals("amount")){
          q = "select amount from retirement_acc where acc_number = "+id+
              " AND asset='"+ticker+"'";
      }
      else if(type.equals("shares")){
          q = "select shares from investment_acc where acc_number = "+id+
              " AND ticker='"+ticker+"'";
      }
      System.out.println("getShares parameters :"+ id+" "+type+" "+t_id + " "+ticker);
      System.out.print(q);
     
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Quantity was found");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
                   
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
      
      return str;
  }  
    
    public double getInvestAmount(String id, String ticker){
      String str="0";
      String q ="select amount from investment_acc where acc_number="+id+" AND ticker='"+ticker+"'";
       
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Ticker was found");

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return Double.parseDouble(str);
    
    
    
    }
   public void updateFromTransfer(String id,String trans_shares, String table, String ticker, String trade_id, 
           double revenue){
       System.out.println("Parameters for updateFromTransfer "+id+" "+trans_shares+" "+ticker+" "+trade_id+" "+" ");
       String type="";
       double originalbal=getInvestAmount(id,ticker);
       double newbal=originalbal-revenue;
       String current_shares="";
       int finalshares=0;
       String q="";
       if(investment_transfer_acc_list.getSelectedItem().toString().equals("investment_acc")){
           type="shares";
           current_shares=getShares(id,"shares",trade_id,ticker);
           System.out.println("UpdateTromTransfers method: Number of current Shares :"+current_shares);
           finalshares=Integer.parseInt(current_shares) - Integer.parseInt(trans_shares);
           q = "update investment_acc set shares = "+ finalshares +", amount = "+newbal
                   + " where acc_number = " + id +
                     " AND ticker='" +ticker+"'";
           System.out.println(q);
       }
       else if(investment_transfer_acc_list.getSelectedItem().toString().equals("retirement_acc")){
           
           type="amount";
           current_shares=getShares(id,"amount",trade_id,ticker);
           System.out.println("UpdateTromTransfers method: Number of current Shares :"+current_shares);
           finalshares=Integer.parseInt(current_shares) - Integer.parseInt(trans_shares);
           q = "update retirement_acc set amount = "+ finalshares +" where acc_number =" + id +
                     " AND asset='" +ticker+"'";
           System.out.println(q);
       }
       // update shares
        try {
            Statement s = con.createStatement();
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Inserting Updating From Table for Investment Transfers Failed : Possible incorrect  id");
                
            }
            else{
                System.out.println("Successful Update of From Table During Transfer");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update From account" + ex.toString());
        }
       
       
   }
   
   public boolean findTicker(String table, String id, String ticker){
    String str="";
    String q ="";
        if(table.equals("investment_acc")){
            q = "select ticker from "+table+ " where acc_number = "+id+" AND ticker='"+ticker+"'";
        }
        else if(table.equals("retirement_acc")){
            q = "select asset from "+table+ " where acc_number = "+id+" AND asset='"+ticker+"'";
        }
       
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Ticker was found");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
                   flag=true;
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return flag;
}
   
   public String getPlan(String id){
        String str="";
         String q = "select plan from retirement_acc where acc_number = "+id;
      
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Plan was found");
                

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
        
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
   }
   
   
   
   public void updateToTransfer(String id,String trans_shares, String table, String ticker, String revenue, String trade_id){
       String plan= getPlan(id);
       String type="";
       String current_shares="";
       double finalshares=0;
       String q="";
       double originalbal=getInvestAmount(id,ticker);
       double newbal=originalbal+Double.parseDouble(revenue);
       if(investment_transfer_acc_list2.getSelectedItem().toString().equals("investment_acc")){
           
           type="shares";
           // First query if the investment actually exists in the table
           // if it doesnt, just insert
           boolean found=findTicker("investment_acc",id,ticker);
           if(found){
           
           current_shares=getShares(id,"shares",trade_id,ticker);
           finalshares=Integer.parseInt(current_shares) + Integer.parseInt(trans_shares);
           q = "update investment_acc set shares = "+ finalshares +", amount ="+newbal+" where acc_number =" + id +
                     " AND ticker='" +ticker+"'";
           }
           else{
                q = "insert into investment_acc(shares,amount,acc_number,ticker) "
                        + "values("+ Integer.parseInt(trans_shares)+","+revenue+","+id+",'"+ticker+"')";
           }
       }
       else if(investment_transfer_acc_list2.getSelectedItem().toString().equals("retirement_acc")){
           
           type="amount";
          
           boolean found=findTicker("retirement_acc",id,ticker);
           if(found){
               
                current_shares=getShares(id,"amount",trade_id,ticker);
           finalshares=Integer.parseInt(current_shares) + Integer.parseInt(trans_shares);
               
            q = "update retirement_acc set amount = "+ finalshares +" where acc_number =" + id +
                     " AND asset='" +ticker+"'";
           }
           else{
               System.out.println("Retirement ID: "+id);
                q = "insert into retirement_acc(plan,amount,acc_number,asset) "
                        + "values('"+plan +"',"+ Integer.parseInt(trans_shares)+","+id+",'"+ticker+"')";
           }
          
       }
       // update shares
        try {
            Statement s = con.createStatement();
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Inserting Updating From Table for Investment Transfers Failed : Possible incorrect  id");
                
            }
            else{
                System.out.println("Successful Update of From Table During Transfer");
            }

            s.close();

        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update From account" + ex.toString());
        }
   }
    
    public String getPurchasePrice(String t_id){
        String str="";
         String q = "select purchase_price from trade where transaction_id = "+t_id;
      
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Plan was found");
                

            } else {
                rsmd = result.getMetaData();
               
                do {
                   str= result.getString(1);
               
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
    

    
    public void updateTransferTrade(String q_transferred, String q_left, String q_current, String acc_number, String
            trans_id, String ticker){
        // get quantity and quantity_left
        //String q_left=findQuantityLeft(ticker, trade_id, from_acc_id);
        int new_q_left=Integer.parseInt(q_left)-Integer.parseInt(q_transferred);
        int new_q_current=Integer.parseInt(q_current)-Integer.parseInt(q_transferred);
       
       System.out.println("New Amount_left after updateTransferTrade method "+ new_q_left);
        try {
            Statement s = con.createStatement();
          
            String q = "update trade set quantity_left= " +new_q_left+", quantity="+new_q_current+
                    " where acc_number="+acc_number+ "AND transaction_id="+trans_id+
                    " AND action='buy' AND ticker='"+ticker+"'";
            System.out.println(q);
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Trades Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Successful update of Trades");
            }
            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Trades " + ex.toString());
        }
    }
        
        


        // update original trade tuple
        // subtract both quantity and quantity_left
        
        // insert new trade tuple with the transfer quantity
        // and the new acc_number and the same transaction_id
    
    
    public String[] getTradeInfo(String from_id, String ticker, String t_id){
          /*19-APR-14 08.29.56.892661000 PM*/
        String[] newarr=null;
        int id = Integer.parseInt(account_field.getText().toString());
        String q = "select acc_number, ticker, transaction_id, type, action, "
                + "purchase_price, quantity, quantity_left, to_char(purchase_date,'DD-MON-YY HH.MI.SS.SS AM') as purchase_date "
                + " from trade where acc_number=" +from_id+" AND"
                + " ticker='"+ticker+"' AND action='buy' AND transaction_id="+t_id;
        System.err.println("get Trade Info Parameters "+from_id+" "+ ticker+" "+ t_id);
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("Error when querying trades: getTradeInfo method");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

               
            }
            
             newarr = arr.toArray(new String[arr.size()]);
                

           
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return newarr;
    }
    
    public boolean findTrade(String acc_number,String ticker,String transaction_id,String type){
        String str="";
        String q ="";
        q="select * from trade where acc_number= "+acc_number+" AND ticker = '"+
                ticker+"' AND transaction_id = "+transaction_id+" AND action = '"+type+"'";
       
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Ticker was found in the findTrade method");
                flag=false;

            } else {
                rsmd = result.getMetaData();
               
                do {
                   
                   flag=true;
                } while (result.next());


            }
            result.close();
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return flag;
    }
public void updateTrades(String id, String ticker,String tid, String security, String transfer){
    String q_left=findQuantityLeft(ticker, tid, id);
    String q_current=findQuantity(ticker,tid,id);
    double new_q_left=Double.parseDouble(q_left)+Double.parseDouble(transfer);
    double new_q_current=Double.parseDouble(q_current)+Double.parseDouble(transfer);
    System.out.println(tid);
        
        String str = "";
        try {
            Statement s = con.createStatement();
            String q="update trade set quantity= "+new_q_current+", quantity_left = "+new_q_left+
                    " where acc_number = "+id+" AND ticker='"+ticker+"' AND transaction_id = "
                    +tid+" AND action='buy' AND type='"+security+"'";
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Updating Trades Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Successful update of Trades");
            }
            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to Update Trades: InsertTrades method  " + ex.toString());
        }
}
    private void transfer_investmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfer_investmentsActionPerformed
        
        //find the quantity_left.
        
        String q_transfer=transfer_shares.getText();
        String from_acc_id=investment_transfer_from_id_list.getSelectedItem().toString();
        System.out.println(from_acc_id);
        String to_acc_id=investment_transfer_to_id_list.getSelectedItem().toString();
        String trade_id=transfer_investment_trade_id.getSelectedItem().toString();
        System.out.println(trade_id);
        String ticker=getTicker(trade_id,from_acc_id);
        String[] data= getTradeInfo(from_acc_id,ticker,trade_id);
        //String type=getType();
        String q_left=findQuantityLeft(ticker, trade_id, from_acc_id);
        System.out.println("Current quantity left before excecution :" +q_left);
        String q_current=findQuantity(ticker,trade_id,from_acc_id);
        System.out.println("Current quantity  before excecution :" +q_current);
        String table=investment_transfer_acc_list.getSelectedItem().toString();
        boolean q= qCheck(q_transfer);
        boolean ws=q_transfer.contains(" ");
        if((!q) || ws){
            System.out.println("Invalid entry for shares");
            messageUser("Invalid entry for shares");
        }
        else{
            if(Integer.parseInt(q_left) < Integer.parseInt(q_transfer)){
                System.out.println("Warning you don't have enough shares to transfer");
            }
            else{
                
                String p_price=getPurchasePrice(trade_id);
                double revenue=Double.parseDouble(p_price)*Integer.parseInt(q_transfer);
                
                //String id,String trans_shares, String table, String ticker
                updateFromTransfer(from_acc_id,q_transfer,table,ticker,trade_id,revenue);
                
                //updateToTransfer(String id,String trans_shares, String table, String ticker, String revenue)
                updateToTransfer(to_acc_id,q_transfer,table,ticker,""+revenue,trade_id);
                
                // updateTransaction
                String trans_id=updateTrans(revenue,"transfer");
                
                //update trades table for original tuple
                updateTransferTrade(q_transfer,q_left,q_current,from_acc_id,trade_id,data[1]);
                
                //insertTrades(id, ticker, tid, security, "buy", price, quantity,quantity,"current_timestamp");
                int new_q_left=Integer.parseInt(q_left)-Integer.parseInt(q_transfer);
                int new_q_current=Integer.parseInt(q_current)-Integer.parseInt(q_transfer);
                
                // if trade row actually already exists
                // then update instead of inserting.
                boolean tradefound=findTrade(to_acc_id,ticker,trade_id,"buy");
                if(tradefound){
                    System.out.println("Existing trade found. Now Updating Trade");
                    //update trade
                    //String id, String ticker,String tid, String security, String transfer
                    updateTrades(to_acc_id, ticker,trade_id, data[3], q_transfer);
                }
                else{
                insertTrades(to_acc_id, ticker, trade_id, data[3],"buy", Double.parseDouble(data[5]),
                        Integer.parseInt(q_transfer),Integer.parseInt(q_transfer),data[8]);
                }
                
                // updateTransfers
                insertTransfer(from_acc_id,to_acc_id,trans_id,"investment");
                
                
                
               
            }
        }
                
        // check if quantity_left > quantity_transfer
        
        
        // credit from account. Example, decrease amount of shares in investment acc
        
        // updateToTransfer
        // insert into / update retirement acc 
        
        // update trades
        // update from stock trade quantity and quantity_left
        // substract both by the amount        
        
        
        // insert/update stock trade row with same transaction id , date, price
        // but the quantity is the rest and quantity_left is the rest.
        // only update when transaction_id,date,price, and acc_number is the same.
       
//        if(quantity_left <0){
//            System.out.println("You are selling too many shares");
//        }
//        else{
//         String oldbalance=getInvestValue(id, ticker);
//        double calculation=Double.parseDouble(my_price.getText()) * (quantity);
//        double newbalance=Double.parseDouble(oldbalance) - calculation;
//        
//        updateTrades(investment_purchases.getSelectedItem().toString(),quantity_left);
//        double revenue=quantity*price;
//        update transactions
//        String tID=updateTrans(revenue,type);
//        shares=shares-quantity;
//        updateInvestments(shares, ticker, id,""+newbalance);
//        System.out.println("Revenue : "+revenue);
//        funds=funds+revenue;
//        updateCashAcc(cashid, funds, cashtype, ""+funds);
//        insertTrades(id, ticker, tID, type, "sell", Integer.parseInt(my_price.getText()),quantity,quantity_left,my_date.getText());
//        getMyTrades(invest_acc.getSelectedItem().toString());
//        record transaction
//        String t_id=updateTrans(Double.parseDouble(amount), "transfer");
//        record transfer
//        insertTransfer(fromID,toID,t_id,"cash");
//         update acc_id of trades row
//         this will distinguish it from investment or retirement acc
//         by doing a query on the acc_type
//         This is for the sake of the tax report
        
    }//GEN-LAST:event_transfer_investmentsActionPerformed

    private void cash_transfer_change_toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_transfer_change_toActionPerformed
         if(cash_transfer_acc2.getSelectedItem().toString().equals("cash_mgm_acc")){
        int id = Integer.parseInt(account_field.getText().toString());
        String q;
        q="select distinct acc_number from owns natural join account where acc_type='cash_management' AND customer_id = " + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Cash Management Accounts");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

               
            }
           
             String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                cash_transfer_to_id_list.setModel(model);
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
           System.out.println("Changed to Cash mgm accounts");
       }
       else if(cash_transfer_acc2.getSelectedItem().toString().equals("retirement_acc")){
        int id = Integer.parseInt(account_field.getText().toString());
        String q="select distinct acc_number from owns natural join account where acc_type='retirement' AND customer_id = " + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Retirement Accounts");
                arr.add("none");
            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        System.out.println("retirement account result" + result.getString(i));
                        arr.add(result.getString(i));

                    }
                    
                    flag = true;
                } while (result.next());

                

            }
            String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);

                cash_transfer_to_id_list.setModel(model);
               
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Changed to retirement accounts");
       }
    }//GEN-LAST:event_cash_transfer_change_toActionPerformed

    private void cash_transfer_change_fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_transfer_change_fromActionPerformed
       if(cash_transfer_acc1.getSelectedItem().toString().equals("cash_mgm_acc")){
        int id = Integer.parseInt(account_field.getText().toString());
        String q;
        q="select distinct acc_number from owns natural join account where acc_type='cash_management' AND customer_id = " + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Cash Management Accounts");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                    System.out.println("");
                    result_text.append("\n");
                    flag = true;
                } while (result.next());

               
            }
           
             String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                cash_transfer_from_id_list.setModel(model);
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
           System.out.println("Changed to Cash mgm accounts");
       }
       else if(cash_transfer_acc1.getSelectedItem().toString().equals("retirement_acc")){
        int id = Integer.parseInt(account_field.getText().toString());
        String q="select distinct acc_number from owns natural join account where acc_type='retirement' AND customer_id = " + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Retirement Accounts");
                arr.add("none");
            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        System.out.println("retirement account result" + result.getString(i));
                        arr.add(result.getString(i));

                    }
                    
                    flag = true;
                } while (result.next());

                

            }
            String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);

                cash_transfer_from_id_list.setModel(model);
               
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Changed to retirement accounts");
       }
    }//GEN-LAST:event_cash_transfer_change_fromActionPerformed

    private void close_acc_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_acc_submitActionPerformed
        // close_acc_list.getSelectedItem().toString();
        String id=close_acc_list.getSelectedItem().toString();
        deleteAccount(id);
        findAllAccounts();
    }//GEN-LAST:event_close_acc_submitActionPerformed
    
    public void deleteAccount(String id){
        
        String q="delete from account where acc_number="+id;
        
        try {
            Statement s = con.createStatement();
            
            int update = s.executeUpdate(q);
            if (update == 0) {
                System.out.println("Deleting account Failed: Possible incorrect ticker or id");
            } else {
                System.out.println("Successful Deletion of Accounts :" +id);
                messageUser("Successful Deletion of Accounts :" +id);
            }
            s.close();
        } catch (SQLException ex) {
            System.out.println("Error When Trying to delete Accounts  " + ex.toString());
        }
    }
    public void findAllAccounts(){
         String id = account_field.getText().toString();
        String q = "select acc_number from owns where customer_id=" + id;
        List<String> arr = new ArrayList<String>();
        boolean flag = false;
        try {
            Statement s = con.createStatement();
            ResultSet result;
            result = s.executeQuery(q);
            ResultSetMetaData rsmd;
            if (!result.next()) {
                System.out.println("No Accounts available for customer");
                arr.add("none");

            } else {
                rsmd = result.getMetaData();
                
                do {

                    //System.out.printf("%s",result.getString(1));
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                        arr.add(result.getString(i));

                    }
                  
                  
                } while (result.next());

               
            }
            
                String[] newarr = arr.toArray(new String[arr.size()]);
                DefaultComboBoxModel model = new DefaultComboBoxModel(newarr);
                close_acc_list.setModel(model);  
            s.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        // check length of command line
        /*
         Argument 1: File path for stockticker
         Argument 2: Account ID for Program Trader
         Argument 3: Customer ID for Tax Statement
         Argument 4: Year for Tax Statement

         */
        Stockticker st = new Stockticker();
        TaxStatement ts= new TaxStatement();
        ProgTrader pt=new ProgTrader();
        if (args.length < 1) {
            // no input;
             Component frame = null;
        JOptionPane.showMessageDialog(frame,
                "Command line arguments <0. Continue to Login Screen"
                + "",
                "", JOptionPane.PLAIN_MESSAGE
        );
        } 
        else if(args.length==1){
        
            st.run(args[0]);
            Component frame = null;
        JOptionPane.showMessageDialog(frame,
                "Stock Ticker Intiiated\n"
                + "View stocklist.txt for an updated list of stocks",
                "", JOptionPane.PLAIN_MESSAGE
        );
            
            
        }
        else if(args.length==2){
             st.run(args[0]);
             pt.run(args[1]);
             
             Component frame = null;
        JOptionPane.showMessageDialog(frame,
                "Stock Ticker and Program Trader Intitiated\n"
                + "",
                "", JOptionPane.PLAIN_MESSAGE
        );
        }
        else if(args.length==4){
              st.run(args[0]);
              pt.run(args[1]);
              System.out.println(args[2]);
              System.out.println(args[3]);
              if(ts.qCheck(args[2])&& ts.qCheck(args[3])){
                  ts.run(args[2],args[3]);
              }
              else{
                  Component frame = null;
        JOptionPane.showMessageDialog(frame,
                "Invalid input for year or customer id\n"
                + "",
                "", JOptionPane.PLAIN_MESSAGE
        );
              }
             
               Component frame = null;
        JOptionPane.showMessageDialog(frame,
                "Stock Ticker,Program Trader, and Tax Statement Initiated\n"
                + "",
                "", JOptionPane.PLAIN_MESSAGE
        );
        }
        else{
            System.out.println("Invalid length of command line input");
        }
        
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_field;
    private javax.swing.JButton account_open;
    private javax.swing.JComboBox account_plan;
    private javax.swing.JComboBox account_type;
    private javax.swing.JComboBox cash_account;
    private javax.swing.JComboBox cash_action;
    private javax.swing.JTextField cash_amount;
    private javax.swing.JButton cash_logout;
    private javax.swing.JButton cash_submit;
    private javax.swing.JComboBox cash_to_account;
    private javax.swing.JComboBox cash_transfer_acc1;
    private javax.swing.JComboBox cash_transfer_acc2;
    private javax.swing.JButton cash_transfer_change_from;
    private javax.swing.JButton cash_transfer_change_to;
    private javax.swing.JComboBox cash_transfer_from_id_list;
    private javax.swing.JComboBox cash_transfer_from_type;
    private javax.swing.JComboBox cash_transfer_to_id_list;
    private javax.swing.JComboBox cash_transfer_to_type;
    private javax.swing.JButton change_account_list;
    private javax.swing.JButton change_transaction_list;
    private javax.swing.JComboBox close_acc_list;
    private javax.swing.JButton close_acc_submit;
    private javax.swing.JComboBox invest_acc;
    private javax.swing.JComboBox investment_purchases;
    private javax.swing.JComboBox investment_transfer_acc_list;
    private javax.swing.JComboBox investment_transfer_acc_list2;
    private javax.swing.JButton investment_transfer_change_from;
    private javax.swing.JButton investment_transfer_change_id;
    private javax.swing.JButton investment_transfer_change_to;
    private javax.swing.JComboBox investment_transfer_from_id_list;
    private javax.swing.JComboBox investment_transfer_to_id_list;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox loan_account;
    private javax.swing.JTextField loan_amount;
    private javax.swing.JButton loan_borrow;
    private javax.swing.JComboBox loan_cash;
    private javax.swing.JComboBox loan_cash_type;
    private javax.swing.JTextField loan_interest;
    private javax.swing.JButton loan_logout;
    private javax.swing.JPanel loan_panel;
    private javax.swing.JButton loan_pay;
    private javax.swing.JPanel login;
    private javax.swing.JButton login_exit;
    private javax.swing.JPanel main;
    private javax.swing.JButton management_logout;
    private javax.swing.JTextField my_date;
    private javax.swing.JTextField my_price;
    private javax.swing.JTextField my_quantity;
    private javax.swing.JButton pay_interest;
    private javax.swing.JButton query_logout;
    private javax.swing.JButton query_submit;
    private javax.swing.JTextField query_ticker;
    private javax.swing.JComboBox query_type;
    private javax.swing.JButton query_view_all;
    private javax.swing.JButton result_return;
    private javax.swing.JTextArea result_text;
    private javax.swing.JPanel results;
    private javax.swing.JComboBox retirement_action;
    private javax.swing.JComboBox retirement_cash;
    private javax.swing.JComboBox retirement_cash_type;
    private javax.swing.JTextField retirement_deposit;
    private javax.swing.JComboBox retirement_list;
    private javax.swing.JButton retirement_logout;
    private javax.swing.JButton retirement_submit;
    private javax.swing.JButton submit;
    private javax.swing.JComboBox trade_account_type;
    private javax.swing.JComboBox trade_action;
    private javax.swing.JComboBox trade_cash;
    private javax.swing.JComboBox trade_cash_account;
    private javax.swing.JButton trade_display;
    private javax.swing.JButton trade_logout;
    private javax.swing.JTextField trade_quantity;
    private javax.swing.JComboBox trade_security;
    private javax.swing.JButton trade_submit;
    private javax.swing.JTextField trade_ticker;
    private javax.swing.JLabel trade_type;
    private javax.swing.JTextField transfer_cash;
    private javax.swing.JComboBox transfer_investment_trade_id;
    private javax.swing.JButton transfer_investments;
    private javax.swing.JButton transfer_logout;
    private javax.swing.JTextField transfer_shares;
    private javax.swing.JButton transfer_submit;
    // End of variables declaration//GEN-END:variables
}
